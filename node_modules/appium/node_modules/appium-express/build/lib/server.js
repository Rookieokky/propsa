'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _serveFavicon = require('serve-favicon');

var _serveFavicon2 = _interopRequireDefault(_serveFavicon);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _methodOverride = require('method-override');

var _methodOverride2 = _interopRequireDefault(_methodOverride);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _expressLogging = require('./express-logging');

var _middleware = require('./middleware');

var _static = require('./static');

var _crash = require('./crash');

function server(configureRoutes, port) {
  var hostname = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
  var app, httpServer;
  return _regeneratorRuntime.async(function server$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = (0, _express2['default'])();
        httpServer = _http2['default'].createServer(app);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {
          httpServer.on('error', function (err) {
            if (err.code === 'EADDRNOTAVAIL') {
              _logger2['default'].error('Could not start REST http interface listener. ' + 'Requested address is not available.');
            } else {
              _logger2['default'].error('Could not start REST http interface listener. The requested ' + 'port may already be in use. Please make sure there is no ' + 'other instance of this server running already.');
            }
            reject(err);
          });
          httpServer.on('connection', function (socket) {
            socket.setTimeout(600 * 1000); // 10 minute timeout
          });
          configureServer(app, configureRoutes);

          var serverArgs = [port];
          if (hostname) {
            // If the hostname is omitted, the server will accept
            // connections on any IP address
            serverArgs.push(hostname);
          }
          httpServer.listen.apply(httpServer, serverArgs.concat([function (err) {
            if (err) {
              reject(err);
            }
            resolve(httpServer);
          }]));
        }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function configureServer(app, configureRoutes) {
  app.use(_expressLogging.endLogFormatter);

  // set up static assets
  app.use((0, _serveFavicon2['default'])(_path2['default'].resolve(_static.STATIC_DIR, 'favicon.ico')));
  app.use(_express2['default']['static'](_static.STATIC_DIR));

  // crash routes, for testing
  app.use('/wd/hub/produce_error', _crash.produceError);
  app.use('/wd/hub/crash', _crash.produceCrash);

  // add middlewares
  app.use(_middleware.allowCrossDomain);
  app.use(_middleware.fixPythonContentType);
  app.use(_bodyParser2['default'].urlencoded({ extended: true }));
  app.use((0, _methodOverride2['default'])());
  app.use(_middleware.catch4XXHandler);
  app.use(_middleware.catchAllHandler);

  // make sure appium never fails because of a file size upload limit
  app.use(_bodyParser2['default'].json({ limit: '1gb' }));

  // set up start logging (which depends on bodyParser doing its thing)
  app.use(_expressLogging.startLogFormatter);

  configureRoutes(app);

  // dynamic routes for testing, etc.
  app.all('/welcome', _static.welcome);
  app.all('/test/guinea-pig', _static.guineaPig);

  // catch this last, so anything that falls through is 404ed
  app.use(_middleware.catch404Handler);
}

exports.server = server;
exports.configureServer = configureServer;

// create the actual http server
//# sourceMappingURL=data:application/json;base64,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LEdBQUcsbUNBQW1CLENBQUM7O0FBRTNCLGlCQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7OztBQUdyQixLQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsa0JBQVUsQ0FBQztBQUM3QixLQUFHLENBQUMsR0FBRyxDQUFDLGtCQUFrQixvQkFBWSxDQUFDOzs7QUFHdkMsS0FBRyxDQUFDLEdBQUcsNkJBQWlCLENBQUM7Q0FDMUI7O1FBRVEsTUFBTSxHQUFOLE1BQU07UUFBRSxlQUFlLEdBQWYsZUFBZSIsImZpbGUiOiJsaWIvc2VydmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IGZhdmljb24gZnJvbSAnc2VydmUtZmF2aWNvbic7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcic7XG5pbXBvcnQgbWV0aG9kT3ZlcnJpZGUgZnJvbSAnbWV0aG9kLW92ZXJyaWRlJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgc3RhcnRMb2dGb3JtYXR0ZXIsIGVuZExvZ0Zvcm1hdHRlciB9IGZyb20gJy4vZXhwcmVzcy1sb2dnaW5nJztcbmltcG9ydCB7IGFsbG93Q3Jvc3NEb21haW4sIGZpeFB5dGhvbkNvbnRlbnRUeXBlLCBjYXRjaEFsbEhhbmRsZXIsXG4gICAgICAgICBjYXRjaDQwNEhhbmRsZXIsIGNhdGNoNFhYSGFuZGxlciB9IGZyb20gJy4vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBndWluZWFQaWcsIHdlbGNvbWUsIFNUQVRJQ19ESVIgfSBmcm9tICcuL3N0YXRpYyc7XG5pbXBvcnQgeyBwcm9kdWNlRXJyb3IsIHByb2R1Y2VDcmFzaCB9IGZyb20gJy4vY3Jhc2gnO1xuXG5cbmFzeW5jIGZ1bmN0aW9uIHNlcnZlciAoY29uZmlndXJlUm91dGVzLCBwb3J0LCBob3N0bmFtZSA9IG51bGwpIHtcbiAgLy8gY3JlYXRlIHRoZSBhY3R1YWwgaHR0cCBzZXJ2ZXJcbiAgbGV0IGFwcCA9IGV4cHJlc3MoKTtcbiAgbGV0IGh0dHBTZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcihhcHApO1xuXG4gIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgaHR0cFNlcnZlci5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyLmNvZGUgPT09ICdFQUREUk5PVEFWQUlMJykge1xuICAgICAgICBsb2cuZXJyb3IoJ0NvdWxkIG5vdCBzdGFydCBSRVNUIGh0dHAgaW50ZXJmYWNlIGxpc3RlbmVyLiAnICtcbiAgICAgICAgICAgICAgICAgICdSZXF1ZXN0ZWQgYWRkcmVzcyBpcyBub3QgYXZhaWxhYmxlLicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmVycm9yKCdDb3VsZCBub3Qgc3RhcnQgUkVTVCBodHRwIGludGVyZmFjZSBsaXN0ZW5lci4gVGhlIHJlcXVlc3RlZCAnICtcbiAgICAgICAgICAgICAgICAgICdwb3J0IG1heSBhbHJlYWR5IGJlIGluIHVzZS4gUGxlYXNlIG1ha2Ugc3VyZSB0aGVyZSBpcyBubyAnICtcbiAgICAgICAgICAgICAgICAgICdvdGhlciBpbnN0YW5jZSBvZiB0aGlzIHNlcnZlciBydW5uaW5nIGFscmVhZHkuJyk7XG4gICAgICB9XG4gICAgICByZWplY3QoZXJyKTtcbiAgICB9KTtcbiAgICBodHRwU2VydmVyLm9uKCdjb25uZWN0aW9uJywgKHNvY2tldCkgPT4ge1xuICAgICAgc29ja2V0LnNldFRpbWVvdXQoNjAwICogMTAwMCk7IC8vIDEwIG1pbnV0ZSB0aW1lb3V0XG4gICAgfSk7XG4gICAgY29uZmlndXJlU2VydmVyKGFwcCwgY29uZmlndXJlUm91dGVzKTtcblxuICAgIGxldCBzZXJ2ZXJBcmdzID0gW3BvcnRdO1xuICAgIGlmIChob3N0bmFtZSkge1xuICAgICAgLy8gSWYgdGhlIGhvc3RuYW1lIGlzIG9taXR0ZWQsIHRoZSBzZXJ2ZXIgd2lsbCBhY2NlcHRcbiAgICAgIC8vIGNvbm5lY3Rpb25zIG9uIGFueSBJUCBhZGRyZXNzXG4gICAgICBzZXJ2ZXJBcmdzLnB1c2goaG9zdG5hbWUpO1xuICAgIH1cbiAgICBodHRwU2VydmVyLmxpc3RlbiguLi5zZXJ2ZXJBcmdzLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShodHRwU2VydmVyKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZVNlcnZlciAoYXBwLCBjb25maWd1cmVSb3V0ZXMpIHtcbiAgYXBwLnVzZShlbmRMb2dGb3JtYXR0ZXIpO1xuXG4gIC8vIHNldCB1cCBzdGF0aWMgYXNzZXRzXG4gIGFwcC51c2UoZmF2aWNvbihwYXRoLnJlc29sdmUoU1RBVElDX0RJUiwgJ2Zhdmljb24uaWNvJykpKTtcbiAgYXBwLnVzZShleHByZXNzLnN0YXRpYyhTVEFUSUNfRElSKSk7XG5cbiAgLy8gY3Jhc2ggcm91dGVzLCBmb3IgdGVzdGluZ1xuICBhcHAudXNlKCcvd2QvaHViL3Byb2R1Y2VfZXJyb3InLCBwcm9kdWNlRXJyb3IpO1xuICBhcHAudXNlKCcvd2QvaHViL2NyYXNoJywgcHJvZHVjZUNyYXNoKTtcblxuICAvLyBhZGQgbWlkZGxld2FyZXNcbiAgYXBwLnVzZShhbGxvd0Nyb3NzRG9tYWluKTtcbiAgYXBwLnVzZShmaXhQeXRob25Db250ZW50VHlwZSk7XG4gIGFwcC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHtleHRlbmRlZDogdHJ1ZX0pKTtcbiAgYXBwLnVzZShtZXRob2RPdmVycmlkZSgpKTtcbiAgYXBwLnVzZShjYXRjaDRYWEhhbmRsZXIpO1xuICBhcHAudXNlKGNhdGNoQWxsSGFuZGxlcik7XG5cbiAgLy8gbWFrZSBzdXJlIGFwcGl1bSBuZXZlciBmYWlscyBiZWNhdXNlIG9mIGEgZmlsZSBzaXplIHVwbG9hZCBsaW1pdFxuICBhcHAudXNlKGJvZHlQYXJzZXIuanNvbih7bGltaXQ6ICcxZ2InfSkpO1xuXG4gIC8vIHNldCB1cCBzdGFydCBsb2dnaW5nICh3aGljaCBkZXBlbmRzIG9uIGJvZHlQYXJzZXIgZG9pbmcgaXRzIHRoaW5nKVxuICBhcHAudXNlKHN0YXJ0TG9nRm9ybWF0dGVyKTtcblxuICBjb25maWd1cmVSb3V0ZXMoYXBwKTtcblxuICAvLyBkeW5hbWljIHJvdXRlcyBmb3IgdGVzdGluZywgZXRjLlxuICBhcHAuYWxsKCcvd2VsY29tZScsIHdlbGNvbWUpO1xuICBhcHAuYWxsKCcvdGVzdC9ndWluZWEtcGlnJywgZ3VpbmVhUGlnKTtcblxuICAvLyBjYXRjaCB0aGlzIGxhc3QsIHNvIGFueXRoaW5nIHRoYXQgZmFsbHMgdGhyb3VnaCBpcyA0MDRlZFxuICBhcHAudXNlKGNhdGNoNDA0SGFuZGxlcik7XG59XG5cbmV4cG9ydCB7IHNlcnZlciwgY29uZmlndXJlU2VydmVyIH07XG4iXX0=