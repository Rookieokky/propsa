'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _helpersJs = require('../helpers.js');

var _teen_process = require('teen_process');

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var apkUtilsMethods = {};

apkUtilsMethods.isAppInstalled = function callee$0$0(pkg) {
  var installed, apiLevel, thirdparty, stdout, apkInstalledRgx;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        installed = false;

        _loggerJs2['default'].debug('Getting install status for ' + pkg);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 5:
        apiLevel = context$1$0.sent;
        thirdparty = apiLevel >= 15 ? "-3" : "";
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'list', 'packages', thirdparty, pkg]));

      case 9:
        stdout = context$1$0.sent;
        apkInstalledRgx = new RegExp('^package:' + pkg.replace(/(\.)/g, "\\$1") + '$', 'm');

        installed = apkInstalledRgx.test(stdout);
        _loggerJs2['default'].debug('App is ' + (!installed ? " not" : "") + ' installed');
        return context$1$0.abrupt('return', installed);

      case 16:
        context$1$0.prev = 16;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('Error finding if app is installed. Original error: ' + context$1$0.t0.message);

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 16]]);
};

apkUtilsMethods.startUri = function callee$0$0(uri, pkg) {
  var args;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!uri || !pkg) {
          _loggerJs2['default'].errorAndThrow("URI and package arguments are required");
        }
        context$1$0.prev = 1;
        args = ["am", "start", "-W", "-a", "android.intent.action.VIEW", "-d", uri, pkg];
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.shell(args));

      case 5:
        context$1$0.next = 10;
        break;

      case 7:
        context$1$0.prev = 7;
        context$1$0.t0 = context$1$0['catch'](1);

        _loggerJs2['default'].errorAndThrow('Error attempting to start URI. Original error: ' + context$1$0.t0);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 7]]);
};

apkUtilsMethods.startApp = function callee$0$0() {
  var startAppOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var apiLevel, cmd, stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;

        if (!startAppOptions.activity || !startAppOptions.pkg) {
          _loggerJs2['default'].errorAndThrow("activity and pkg is required for launching application");
        }
        startAppOptions = _lodash2['default'].clone(startAppOptions);
        // initializing defaults
        _lodash2['default'].defaults(startAppOptions, {
          waitPkg: startAppOptions.pkg,
          waitActivity: false,
          retry: true,
          stopApp: true
        });
        // preventing null waitpkg
        startAppOptions.waitPkg = startAppOptions.waitPkg || startAppOptions.pkg;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 7:
        apiLevel = context$1$0.sent;
        cmd = (0, _helpersJs.buildStartCmd)(startAppOptions, apiLevel);
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 11:
        stdout = context$1$0.sent;

        if (!(stdout.indexOf("Error: Activity class") !== -1 && stdout.indexOf("does not exist") !== -1)) {
          context$1$0.next = 23;
          break;
        }

        if (!(startAppOptions.retry && startAppOptions.activity[0] !== ".")) {
          context$1$0.next = 20;
          break;
        }

        _loggerJs2['default'].debug("We tried to start an activity that doesn't exist, " + "retrying with . prepended to activity");
        startAppOptions.activity = '.' + startAppOptions.activity;
        startAppOptions.retry = false;
        return context$1$0.abrupt('return', this.startApp(startAppOptions));

      case 20:
        _loggerJs2['default'].errorAndThrow("Activity used to start app doesn't exist or cannot be " + "launched! Make sure it exists and is a launchable activity");

      case 21:
        context$1$0.next = 24;
        break;

      case 23:
        if (stdout.indexOf("java.lang.SecurityException") !== -1) {
          // if the app is disabled on a real device it will throw a security exception
          _loggerJs2['default'].errorAndThrow("Permission to start activity denied.");
        }

      case 24:
        if (!startAppOptions.waitActivity) {
          context$1$0.next = 27;
          break;
        }

        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(this.waitForActivity(startAppOptions.waitPkg, startAppOptions.waitActivity, startAppOptions.waitDuration));

      case 27:
        context$1$0.next = 32;
        break;

      case 29:
        context$1$0.prev = 29;
        context$1$0.t0 = context$1$0['catch'](0);

        _loggerJs2['default'].errorAndThrow('Error occured while starting App. Original error: ' + context$1$0.t0.message);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 29]]);
};

apkUtilsMethods.getFocusedPackageAndActivity = function callee$0$0() {
  var cmd, nullRe, searchRe, stdout, foundNullMatch, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, foundMatch;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug("Getting focused package and activity");
        cmd = ['dumpsys', 'window', 'windows'];
        nullRe = new RegExp(/mFocusedApp=null/);
        searchRe = new RegExp('mFocusedApp.+Record\\{.*\\s([^\\s\\/\\}]+)' + '\\/([^\\s\\/\\}\\,]+)\\,?(\\s[^\\s\\/\\}]+)*\\}');
        context$1$0.prev = 4;
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.shell(cmd));

      case 7:
        stdout = context$1$0.sent;
        foundNullMatch = false;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 12;
        _iterator = _getIterator(stdout.split("\n"));

      case 14:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 25;
          break;
        }

        line = _step.value;
        foundMatch = searchRe.exec(line);

        if (!foundMatch) {
          context$1$0.next = 21;
          break;
        }

        return context$1$0.abrupt('return', { appPackage: foundMatch[1].trim(), appActivity: foundMatch[2].trim() });

      case 21:
        if (nullRe.test(line)) {
          foundNullMatch = true;
        }

      case 22:
        _iteratorNormalCompletion = true;
        context$1$0.next = 14;
        break;

      case 25:
        context$1$0.next = 31;
        break;

      case 27:
        context$1$0.prev = 27;
        context$1$0.t0 = context$1$0['catch'](12);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 31:
        context$1$0.prev = 31;
        context$1$0.prev = 32;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 34:
        context$1$0.prev = 34;

        if (!_didIteratorError) {
          context$1$0.next = 37;
          break;
        }

        throw _iteratorError;

      case 37:
        return context$1$0.finish(34);

      case 38:
        return context$1$0.finish(31);

      case 39:
        if (!foundNullMatch) {
          context$1$0.next = 43;
          break;
        }

        return context$1$0.abrupt('return', { appPackage: null, appActivity: null });

      case 43:
        _loggerJs2['default'].errorAndThrow("Could not parse activity from dumpsys");

      case 44:
        context$1$0.next = 49;
        break;

      case 46:
        context$1$0.prev = 46;
        context$1$0.t1 = context$1$0['catch'](4);

        _loggerJs2['default'].errorAndThrow('Could not get focusPackageAndActivity. Original error: ' + context$1$0.t1.message);

      case 49:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[4, 46], [12, 27, 31, 39], [32,, 34, 38]]);
};

apkUtilsMethods.waitForActivityOrNot = function callee$0$0(pkg, activity, not) {
  var waitMs = arguments.length <= 3 || arguments[3] === undefined ? 20000 : arguments[3];

  var endAt, possibleActivityNames, _loop, _ret;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(!pkg || !activity)) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("Package and activity required.");

      case 2:
        _loggerJs2['default'].debug('Waiting for pkg: \'' + pkg + '\' and activity: \'' + activity + '\'' + ((not ? ' not' : '') + ' to be focused'));
        endAt = Date.now() + waitMs;
        possibleActivityNames = (0, _helpersJs.getPossibleActivityNames)(pkg, activity);

        _loggerJs2['default'].debug('Possible activities, to be checked: ' + possibleActivityNames.join(', '));

        _loop = function callee$1$0() {
          var _ref, appPackage, appActivity, foundAct;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.getFocusedPackageAndActivity());

              case 2:
                _ref = context$2$0.sent;
                appPackage = _ref.appPackage;
                appActivity = _ref.appActivity;

                _loggerJs2['default'].debug('Found package: \'' + appPackage + '\' and activity: \'' + appActivity + '\'');
                foundAct = appPackage === pkg && _lodash2['default'].findIndex(possibleActivityNames, function (possibleActivity) {
                  return possibleActivity === appActivity;
                }) !== -1;

                if (!(!not && foundAct || not && !foundAct)) {
                  context$2$0.next = 9;
                  break;
                }

                return context$2$0.abrupt('return', {
                  v: undefined
                });

              case 9:
                _loggerJs2['default'].debug('Incorrect package and activity. Retrying.');
                // cool down so we're not overloading device with requests
                context$2$0.next = 12;
                return _regeneratorRuntime.awrap((0, _asyncbox.sleep)(750));

              case 12:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

      case 7:
        if (!(Date.now() < endAt)) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_loop());

      case 10:
        _ret = context$1$0.sent;

        if (!(typeof _ret === 'object')) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', _ret.v);

      case 13:
        context$1$0.next = 7;
        break;

      case 15:
        _loggerJs2['default'].errorAndThrow(pkg + '/' + activity + ' never ' + (not ? 'stopped' : 'started'));

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.waitForActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, false, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.waitForNotActivity = function callee$0$0(pkg, act) {
  var waitMs = arguments.length <= 2 || arguments[2] === undefined ? 20000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.waitForActivityOrNot(pkg, act, true, waitMs));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.uninstallApk = function callee$0$0(pkg) {
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Uninstalling ' + pkg);
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.forceStop(pkg));

      case 4:
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.adbExec(['uninstall', pkg], { timeout: 20000 }));

      case 6:
        stdout = context$1$0.sent;

        stdout = stdout.trim();
        // stdout may contain warnings meaning success is not on the first line.

        if (!(stdout.indexOf("Success") !== -1)) {
          context$1$0.next = 13;
          break;
        }

        _loggerJs2['default'].info("App was uninstalled");
        return context$1$0.abrupt('return', true);

      case 13:
        _loggerJs2['default'].info("App was not uninstalled, maybe it wasn't on device?");
        return context$1$0.abrupt('return', false);

      case 15:
        context$1$0.next = 20;
        break;

      case 17:
        context$1$0.prev = 17;
        context$1$0.t0 = context$1$0['catch'](1);

        _loggerJs2['default'].errorAndThrow('Unable to uninstall APK. Original error: ' + context$1$0.t0.message);

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 17]]);
};

apkUtilsMethods.installFromDevicePath = function callee$0$0(apkPathOnDevice) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  var stdout;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.shell(['pm', 'install', '-r', apkPathOnDevice], opts));

      case 2:
        stdout = context$1$0.sent;

        if (stdout.indexOf("Failure") !== -1) {
          _loggerJs2['default'].errorAndThrow('Remote install failed: ' + stdout);
        }

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.install = function callee$0$0(apk) {
  var replace = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  var timeout = arguments.length <= 2 || arguments[2] === undefined ? 60000 : arguments[2];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!replace) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExec(['install', '-r', apk], { timeout: timeout }));

      case 3:
        context$1$0.next = 7;
        break;

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.adbExec(['install', apk], { timeout: timeout }));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.extractStringsFromApk = function callee$0$0(apk, language, out) {
  var stringsJson, localPath, apkTools, args, fileData, apkStrings, msg;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _loggerJs2['default'].debug('Extracting strings for language: ' + (language || "default"));
        stringsJson = 'strings.json';
        localPath = undefined;

        if (language) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceLanguage());

      case 6:
        language = context$1$0.sent;

      case 7:
        apkTools = this.jars['appium_apk_tools.jar'];
        args = ['-jar', apkTools, 'stringsFromApk', apk, out, language];
        fileData = undefined, apkStrings = undefined;
        context$1$0.prev = 10;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', args));

      case 13:
        context$1$0.next = 21;
        break;

      case 15:
        context$1$0.prev = 15;
        context$1$0.t0 = context$1$0['catch'](10);

        _loggerJs2['default'].debug('No strings.xml for language \'' + language + '\', getting default ' + 'strings.xml');
        args.pop();
        context$1$0.next = 21;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('java', args));

      case 21:
        context$1$0.prev = 21;

        _loggerJs2['default'].debug("Reading strings from converted strings.json");
        localPath = _path2['default'].join(out, stringsJson);
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(localPath, 'utf8'));

      case 26:
        fileData = context$1$0.sent;

        apkStrings = JSON.parse(fileData);
        context$1$0.next = 35;
        break;

      case 30:
        context$1$0.prev = 30;
        context$1$0.t1 = context$1$0['catch'](21);

        if (fileData) {
          _loggerJs2['default'].debug('Content started with: ' + fileData.slice(0, 300));
        }
        msg = 'Could not parse strings from strings.json. Original ' + ('error: ' + context$1$0.t1.message);

        _loggerJs2['default'].errorAndThrow(msg);

      case 35:
        return context$1$0.abrupt('return', { apkStrings: apkStrings, localPath: localPath });

      case 36:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[10, 15], [21, 30]]);
};

apkUtilsMethods.getDeviceLanguage = function callee$0$0() {
  var language;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        language = undefined;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 3:
        context$1$0.t0 = context$1$0.sent;

        if (!(context$1$0.t0 < 23)) {
          context$1$0.next = 14;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.getDeviceSysLanguage());

      case 7:
        language = context$1$0.sent;

        if (language) {
          context$1$0.next = 12;
          break;
        }

        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.getDeviceProductLanguage());

      case 11:
        language = context$1$0.sent;

      case 12:
        context$1$0.next = 17;
        break;

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.getDeviceLocale());

      case 16:
        language = context$1$0.sent.split("-")[0];

      case 17:
        return context$1$0.abrupt('return', language);

      case 18:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.setDeviceLanguage = function callee$0$0(language) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysLanguage(language));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.getDeviceCountry = function callee$0$0() {
  var country;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysCountry());

      case 2:
        country = context$1$0.sent;

        if (country) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductCountry());

      case 6:
        country = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', country);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.setDeviceCountry = function callee$0$0(country) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysCountry(country));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.getDeviceLocale = function callee$0$0() {
  var locale;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getDeviceSysLocale());

      case 2:
        locale = context$1$0.sent;

        if (locale) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.getDeviceProductLocale());

      case 6:
        locale = context$1$0.sent;

      case 7:
        return context$1$0.abrupt('return', locale);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

apkUtilsMethods.setDeviceLocale = function callee$0$0(locale) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.setDeviceSysLocale(locale));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = apkUtilsMethods;
module.exports = exports['default'];
// https://regex101.com/r/xZ8vF7/1

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API < 23

// this method is only used in API >= 23

// this method is only used in API >= 23
//# sourceMappingURL=data:application/json;base64,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RUFBRSxDQUFDOzs7NENBRWpELFFBQVE7Ozs7Ozs7Q0FDaEIsQ0FBQzs7QUFFRixlQUFlLENBQUMsaUJBQWlCLEdBQUcsb0JBQWdCLFFBQVE7Ozs7O3lDQUVwRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0NBQzFDLENBQUM7O0FBRUYsZUFBZSxDQUFDLGdCQUFnQixHQUFHO01BRTdCLE9BQU87Ozs7O3lDQUFTLElBQUksQ0FBQyxtQkFBbUIsRUFBRTs7O0FBQTFDLGVBQU87O1lBQ04sT0FBTzs7Ozs7O3lDQUNNLElBQUksQ0FBQyx1QkFBdUIsRUFBRTs7O0FBQTlDLGVBQU87Ozs0Q0FFRixPQUFPOzs7Ozs7O0NBQ2YsQ0FBQzs7QUFFRixlQUFlLENBQUMsZ0JBQWdCLEdBQUcsb0JBQWdCLE9BQU87Ozs7O3lDQUVsRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDOzs7Ozs7O0NBQ3hDLENBQUM7O0FBRUYsZUFBZSxDQUFDLGVBQWUsR0FBRztNQUU1QixNQUFNOzs7Ozt5Q0FBUyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7OztBQUF4QyxjQUFNOztZQUNMLE1BQU07Ozs7Ozt5Q0FDTSxJQUFJLENBQUMsc0JBQXNCLEVBQUU7OztBQUE1QyxjQUFNOzs7NENBRUQsTUFBTTs7Ozs7OztDQUNkLENBQUM7O0FBRUYsZUFBZSxDQUFDLGVBQWUsR0FBRyxvQkFBZ0IsTUFBTTs7Ozs7eUNBRWhELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7Q0FDdEMsQ0FBQzs7cUJBRWEsZUFBZSIsImZpbGUiOiJsaWIvdG9vbHMvYXBrLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRTdGFydENtZCwgZ2V0UG9zc2libGVBY3Rpdml0eU5hbWVzIH0gZnJvbSAnLi4vaGVscGVycy5qcyc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyLmpzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmxldCBhcGtVdGlsc01ldGhvZHMgPSB7fTtcblxuYXBrVXRpbHNNZXRob2RzLmlzQXBwSW5zdGFsbGVkID0gYXN5bmMgZnVuY3Rpb24gKHBrZykge1xuICB0cnkge1xuICAgIGxldCBpbnN0YWxsZWQgPSBmYWxzZTtcbiAgICBsb2cuZGVidWcoYEdldHRpbmcgaW5zdGFsbCBzdGF0dXMgZm9yICR7cGtnfWApO1xuICAgIGxldCBhcGlMZXZlbCA9IGF3YWl0IHRoaXMuZ2V0QXBpTGV2ZWwoKTtcbiAgICBsZXQgdGhpcmRwYXJ0eSA9IGFwaUxldmVsID49IDE1ID8gXCItM1wiIDogXCJcIjtcbiAgICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5zaGVsbChbJ3BtJywgJ2xpc3QnLCAncGFja2FnZXMnLCB0aGlyZHBhcnR5LCBwa2ddKTtcbiAgICBsZXQgYXBrSW5zdGFsbGVkUmd4ID0gbmV3IFJlZ0V4cChgXnBhY2thZ2U6JHtwa2cucmVwbGFjZSgvKFxcLikvZywgXCJcXFxcJDFcIil9JGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ20nKTtcbiAgICBpbnN0YWxsZWQgPSBhcGtJbnN0YWxsZWRSZ3gudGVzdChzdGRvdXQpO1xuICAgIGxvZy5kZWJ1ZyhgQXBwIGlzICR7IWluc3RhbGxlZCA/IFwiIG5vdFwiIDogXCJcIn0gaW5zdGFsbGVkYCk7XG4gICAgcmV0dXJuIGluc3RhbGxlZDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBFcnJvciBmaW5kaW5nIGlmIGFwcCBpcyBpbnN0YWxsZWQuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuYXBrVXRpbHNNZXRob2RzLnN0YXJ0VXJpID0gYXN5bmMgZnVuY3Rpb24gKHVyaSwgcGtnKSB7XG4gIGlmICghdXJpIHx8ICFwa2cpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhcIlVSSSBhbmQgcGFja2FnZSBhcmd1bWVudHMgYXJlIHJlcXVpcmVkXCIpO1xuICB9XG4gIHRyeSB7XG4gICAgbGV0IGFyZ3MgPSBbXCJhbVwiLCBcInN0YXJ0XCIsIFwiLVdcIiwgXCItYVwiLCBcImFuZHJvaWQuaW50ZW50LmFjdGlvbi5WSUVXXCIsIFwiLWRcIixcbiAgICAgICAgICAgICAgICB1cmksIHBrZ107XG4gICAgYXdhaXQgdGhpcy5zaGVsbChhcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBFcnJvciBhdHRlbXB0aW5nIHRvIHN0YXJ0IFVSSS4gT3JpZ2luYWwgZXJyb3I6ICR7ZX1gKTtcbiAgfVxufTtcblxuYXBrVXRpbHNNZXRob2RzLnN0YXJ0QXBwID0gYXN5bmMgZnVuY3Rpb24gKHN0YXJ0QXBwT3B0aW9ucyA9IHt9KSB7XG4gIHRyeSB7XG4gICAgaWYgKCFzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHkgfHwgIXN0YXJ0QXBwT3B0aW9ucy5wa2cpIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KFwiYWN0aXZpdHkgYW5kIHBrZyBpcyByZXF1aXJlZCBmb3IgbGF1bmNoaW5nIGFwcGxpY2F0aW9uXCIpO1xuICAgIH1cbiAgICBzdGFydEFwcE9wdGlvbnMgPSBfLmNsb25lKHN0YXJ0QXBwT3B0aW9ucyk7XG4gICAgLy8gaW5pdGlhbGl6aW5nIGRlZmF1bHRzXG4gICAgXy5kZWZhdWx0cyhzdGFydEFwcE9wdGlvbnMsIHtcbiAgICAgICAgd2FpdFBrZzogc3RhcnRBcHBPcHRpb25zLnBrZyxcbiAgICAgICAgd2FpdEFjdGl2aXR5OiBmYWxzZSxcbiAgICAgICAgcmV0cnk6IHRydWUsXG4gICAgICAgIHN0b3BBcHA6IHRydWVcbiAgICB9KTtcbiAgICAvLyBwcmV2ZW50aW5nIG51bGwgd2FpdHBrZ1xuICAgIHN0YXJ0QXBwT3B0aW9ucy53YWl0UGtnID0gc3RhcnRBcHBPcHRpb25zLndhaXRQa2cgfHwgc3RhcnRBcHBPcHRpb25zLnBrZztcbiAgICBsZXQgYXBpTGV2ZWwgPSBhd2FpdCB0aGlzLmdldEFwaUxldmVsKCk7XG4gICAgbGV0IGNtZCA9IGJ1aWxkU3RhcnRDbWQoc3RhcnRBcHBPcHRpb25zLCBhcGlMZXZlbCk7XG4gICAgbGV0IHN0ZG91dCA9IGF3YWl0IHRoaXMuc2hlbGwoY21kKTtcbiAgICBpZiAoc3Rkb3V0LmluZGV4T2YoXCJFcnJvcjogQWN0aXZpdHkgY2xhc3NcIikgIT09IC0xICYmXG4gICAgICAgIHN0ZG91dC5pbmRleE9mKFwiZG9lcyBub3QgZXhpc3RcIikgIT09IC0xKSB7XG4gICAgICBpZiAoc3RhcnRBcHBPcHRpb25zLnJldHJ5ICYmIHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eVswXSAhPT0gXCIuXCIpIHtcbiAgICAgICAgbG9nLmRlYnVnKFwiV2UgdHJpZWQgdG8gc3RhcnQgYW4gYWN0aXZpdHkgdGhhdCBkb2Vzbid0IGV4aXN0LCBcIiArXG4gICAgICAgICAgICAgICAgICBcInJldHJ5aW5nIHdpdGggLiBwcmVwZW5kZWQgdG8gYWN0aXZpdHlcIik7XG4gICAgICAgIHN0YXJ0QXBwT3B0aW9ucy5hY3Rpdml0eSA9IGAuJHtzdGFydEFwcE9wdGlvbnMuYWN0aXZpdHl9YDtcbiAgICAgICAgc3RhcnRBcHBPcHRpb25zLnJldHJ5ID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0QXBwKHN0YXJ0QXBwT3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhcIkFjdGl2aXR5IHVzZWQgdG8gc3RhcnQgYXBwIGRvZXNuJ3QgZXhpc3Qgb3IgY2Fubm90IGJlIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXVuY2hlZCEgTWFrZSBzdXJlIGl0IGV4aXN0cyBhbmQgaXMgYSBsYXVuY2hhYmxlIGFjdGl2aXR5XCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3Rkb3V0LmluZGV4T2YoXCJqYXZhLmxhbmcuU2VjdXJpdHlFeGNlcHRpb25cIikgIT09IC0xKSB7XG4gICAgICAvLyBpZiB0aGUgYXBwIGlzIGRpc2FibGVkIG9uIGEgcmVhbCBkZXZpY2UgaXQgd2lsbCB0aHJvdyBhIHNlY3VyaXR5IGV4Y2VwdGlvblxuICAgICAgbG9nLmVycm9yQW5kVGhyb3coXCJQZXJtaXNzaW9uIHRvIHN0YXJ0IGFjdGl2aXR5IGRlbmllZC5cIik7XG4gICAgfVxuICAgIGlmIChzdGFydEFwcE9wdGlvbnMud2FpdEFjdGl2aXR5KSB7XG4gICAgICBhd2FpdCB0aGlzLndhaXRGb3JBY3Rpdml0eShzdGFydEFwcE9wdGlvbnMud2FpdFBrZywgc3RhcnRBcHBPcHRpb25zLndhaXRBY3Rpdml0eSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0QXBwT3B0aW9ucy53YWl0RHVyYXRpb24pO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBFcnJvciBvY2N1cmVkIHdoaWxlIHN0YXJ0aW5nIEFwcC4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5cbmFwa1V0aWxzTWV0aG9kcy5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsb2cuZGVidWcoXCJHZXR0aW5nIGZvY3VzZWQgcGFja2FnZSBhbmQgYWN0aXZpdHlcIik7XG4gIGxldCBjbWQgPSBbJ2R1bXBzeXMnLCAnd2luZG93JywgJ3dpbmRvd3MnXTtcbiAgbGV0IG51bGxSZSA9IG5ldyBSZWdFeHAoL21Gb2N1c2VkQXBwPW51bGwvKTtcbiAgbGV0IHNlYXJjaFJlID0gbmV3IFJlZ0V4cCgnbUZvY3VzZWRBcHAuK1JlY29yZFxcXFx7LipcXFxccyhbXlxcXFxzXFxcXC9cXFxcfV0rKScgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcXFxcLyhbXlxcXFxzXFxcXC9cXFxcfVxcXFwsXSspXFxcXCw/KFxcXFxzW15cXFxcc1xcXFwvXFxcXH1dKykqXFxcXH0nKTsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci94Wjh2RjcvMVxuICB0cnkge1xuICAgIGxldCBzdGRvdXQgPSBhd2FpdCB0aGlzLnNoZWxsKGNtZCk7XG4gICAgbGV0IGZvdW5kTnVsbE1hdGNoID0gZmFsc2U7XG4gICAgZm9yIChsZXQgbGluZSBvZiBzdGRvdXQuc3BsaXQoXCJcXG5cIikpIHtcbiAgICAgIGxldCBmb3VuZE1hdGNoID0gc2VhcmNoUmUuZXhlYyhsaW5lKTtcbiAgICAgIGlmIChmb3VuZE1hdGNoKSB7XG4gICAgICAgIHJldHVybiB7YXBwUGFja2FnZTogZm91bmRNYXRjaFsxXS50cmltKCksIGFwcEFjdGl2aXR5OiBmb3VuZE1hdGNoWzJdLnRyaW0oKX07XG4gICAgICB9IGVsc2UgaWYgKG51bGxSZS50ZXN0KGxpbmUpKSB7XG4gICAgICAgIGZvdW5kTnVsbE1hdGNoID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGZvdW5kTnVsbE1hdGNoKSB7XG4gICAgICByZXR1cm4ge2FwcFBhY2thZ2U6IG51bGwsIGFwcEFjdGl2aXR5OiBudWxsfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coXCJDb3VsZCBub3QgcGFyc2UgYWN0aXZpdHkgZnJvbSBkdW1wc3lzXCIpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgZ2V0IGZvY3VzUGFja2FnZUFuZEFjdGl2aXR5LiBPcmlnaW5hbCBlcnJvcjogJHtlLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG5cbmFwa1V0aWxzTWV0aG9kcy53YWl0Rm9yQWN0aXZpdHlPck5vdCA9IGFzeW5jIGZ1bmN0aW9uIChwa2csIGFjdGl2aXR5LCBub3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FpdE1zID0gMjAwMDApIHtcbiAgaWYgKCFwa2cgfHwgIWFjdGl2aXR5KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiUGFja2FnZSBhbmQgYWN0aXZpdHkgcmVxdWlyZWQuXCIpO1xuICB9XG4gIGxvZy5kZWJ1ZyhgV2FpdGluZyBmb3IgcGtnOiAnJHtwa2d9JyBhbmQgYWN0aXZpdHk6ICcke2FjdGl2aXR5fSdgICtcbiAgICAgICAgICAgIGAke25vdCA/ICcgbm90JyA6ICcnfSB0byBiZSBmb2N1c2VkYCk7XG4gIGxldCBlbmRBdCA9IERhdGUubm93KCkgKyB3YWl0TXM7XG4gIGxldCBwb3NzaWJsZUFjdGl2aXR5TmFtZXMgPSBnZXRQb3NzaWJsZUFjdGl2aXR5TmFtZXMocGtnLCBhY3Rpdml0eSk7XG4gIGxvZy5kZWJ1ZyhgUG9zc2libGUgYWN0aXZpdGllcywgdG8gYmUgY2hlY2tlZDogJHtwb3NzaWJsZUFjdGl2aXR5TmFtZXMuam9pbignLCAnKX1gKTtcbiAgd2hpbGUgKERhdGUubm93KCkgPCBlbmRBdCkge1xuICAgIGxldCB7YXBwUGFja2FnZSwgYXBwQWN0aXZpdHl9ID0gYXdhaXQgdGhpcy5nZXRGb2N1c2VkUGFja2FnZUFuZEFjdGl2aXR5KCk7XG4gICAgbG9nLmRlYnVnKGBGb3VuZCBwYWNrYWdlOiAnJHthcHBQYWNrYWdlfScgYW5kIGFjdGl2aXR5OiAnJHthcHBBY3Rpdml0eX0nYCk7XG4gICAgbGV0IGZvdW5kQWN0ID0gKChhcHBQYWNrYWdlID09PSBwa2cpICYmXG4gICAgICAgICAgICAgICAgICAgIChfLmZpbmRJbmRleChwb3NzaWJsZUFjdGl2aXR5TmFtZXMsIHBvc3NpYmxlQWN0aXZpdHkgPT4gcG9zc2libGVBY3Rpdml0eSA9PT0gYXBwQWN0aXZpdHkpICE9PSAtMSkpO1xuICAgIGlmICgoIW5vdCAmJiBmb3VuZEFjdCkgfHwgKG5vdCAmJiAhZm91bmRBY3QpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZy5kZWJ1ZygnSW5jb3JyZWN0IHBhY2thZ2UgYW5kIGFjdGl2aXR5LiBSZXRyeWluZy4nKTtcbiAgICAvLyBjb29sIGRvd24gc28gd2UncmUgbm90IG92ZXJsb2FkaW5nIGRldmljZSB3aXRoIHJlcXVlc3RzXG4gICAgYXdhaXQgc2xlZXAoNzUwKTtcbiAgfVxuICBsb2cuZXJyb3JBbmRUaHJvdyhgJHtwa2d9LyR7YWN0aXZpdHl9IG5ldmVyICR7bm90ID8gJ3N0b3BwZWQnIDogJ3N0YXJ0ZWQnfWApO1xufTtcblxuYXBrVXRpbHNNZXRob2RzLndhaXRGb3JBY3Rpdml0eSA9IGFzeW5jIGZ1bmN0aW9uIChwa2csIGFjdCwgd2FpdE1zID0gMjAwMDApIHtcbiAgYXdhaXQgdGhpcy53YWl0Rm9yQWN0aXZpdHlPck5vdChwa2csIGFjdCwgZmFsc2UsIHdhaXRNcyk7XG59O1xuXG5hcGtVdGlsc01ldGhvZHMud2FpdEZvck5vdEFjdGl2aXR5ID0gYXN5bmMgZnVuY3Rpb24gKHBrZywgYWN0LCB3YWl0TXMgPSAyMDAwMCkge1xuICBhd2FpdCB0aGlzLndhaXRGb3JBY3Rpdml0eU9yTm90KHBrZywgYWN0LCB0cnVlLCB3YWl0TXMpO1xufTtcblxuYXBrVXRpbHNNZXRob2RzLnVuaW5zdGFsbEFwayA9IGFzeW5jIGZ1bmN0aW9uIChwa2cpIHtcbiAgbG9nLmRlYnVnKGBVbmluc3RhbGxpbmcgJHtwa2d9YCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgdGhpcy5mb3JjZVN0b3AocGtnKTtcbiAgICBsZXQgc3Rkb3V0ID0gYXdhaXQgdGhpcy5hZGJFeGVjKFsndW5pbnN0YWxsJywgcGtnXSwge3RpbWVvdXQ6IDIwMDAwfSk7XG4gICAgc3Rkb3V0ID0gc3Rkb3V0LnRyaW0oKTtcbiAgICAvLyBzdGRvdXQgbWF5IGNvbnRhaW4gd2FybmluZ3MgbWVhbmluZyBzdWNjZXNzIGlzIG5vdCBvbiB0aGUgZmlyc3QgbGluZS5cbiAgICBpZiAoc3Rkb3V0LmluZGV4T2YoXCJTdWNjZXNzXCIpICE9PSAtMSkge1xuICAgICAgbG9nLmluZm8oXCJBcHAgd2FzIHVuaW5zdGFsbGVkXCIpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZy5pbmZvKFwiQXBwIHdhcyBub3QgdW5pbnN0YWxsZWQsIG1heWJlIGl0IHdhc24ndCBvbiBkZXZpY2U/XCIpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBVbmFibGUgdG8gdW5pbnN0YWxsIEFQSy4gT3JpZ2luYWwgZXJyb3I6ICR7ZS5tZXNzYWdlfWApO1xuICB9XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuaW5zdGFsbEZyb21EZXZpY2VQYXRoID0gYXN5bmMgZnVuY3Rpb24gKGFwa1BhdGhPbkRldmljZSwgb3B0cyA9IHt9KSB7XG4gIGxldCBzdGRvdXQgPSBhd2FpdCB0aGlzLnNoZWxsKFsncG0nLCAnaW5zdGFsbCcsICctcicsIGFwa1BhdGhPbkRldmljZV0sIG9wdHMpO1xuICBpZiAoc3Rkb3V0LmluZGV4T2YoXCJGYWlsdXJlXCIpICE9PSAtMSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBSZW1vdGUgaW5zdGFsbCBmYWlsZWQ6ICR7c3Rkb3V0fWApO1xuICB9XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuaW5zdGFsbCA9IGFzeW5jIGZ1bmN0aW9uIChhcGssIHJlcGxhY2UgPSB0cnVlLCB0aW1lb3V0ID0gNjAwMDApIHtcbiAgaWYgKHJlcGxhY2UpIHtcbiAgICBhd2FpdCB0aGlzLmFkYkV4ZWMoWydpbnN0YWxsJywgJy1yJywgYXBrXSwge3RpbWVvdXR9KTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCB0aGlzLmFkYkV4ZWMoWydpbnN0YWxsJywgYXBrXSwge3RpbWVvdXR9KTtcbiAgfVxufTtcblxuYXBrVXRpbHNNZXRob2RzLmV4dHJhY3RTdHJpbmdzRnJvbUFwayA9IGFzeW5jIGZ1bmN0aW9uIChhcGssIGxhbmd1YWdlLCBvdXQpIHtcbiAgbG9nLmRlYnVnKGBFeHRyYWN0aW5nIHN0cmluZ3MgZm9yIGxhbmd1YWdlOiAke2xhbmd1YWdlIHx8IFwiZGVmYXVsdFwifWApO1xuICBsZXQgc3RyaW5nc0pzb24gPSAnc3RyaW5ncy5qc29uJztcbiAgbGV0IGxvY2FsUGF0aDtcbiAgaWYgKCFsYW5ndWFnZSkge1xuICAgIGxhbmd1YWdlID0gYXdhaXQgdGhpcy5nZXREZXZpY2VMYW5ndWFnZSgpO1xuICB9XG4gIGxldCBhcGtUb29scyA9IHRoaXMuamFyc1snYXBwaXVtX2Fwa190b29scy5qYXInXTtcbiAgbGV0IGFyZ3MgPSBbJy1qYXInLCBhcGtUb29scywgJ3N0cmluZ3NGcm9tQXBrJywgYXBrLCBvdXQsIGxhbmd1YWdlXTtcbiAgbGV0IGZpbGVEYXRhLCBhcGtTdHJpbmdzO1xuICB0cnkge1xuICAgIGF3YWl0IGV4ZWMoJ2phdmEnLCBhcmdzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZy5kZWJ1ZyhgTm8gc3RyaW5ncy54bWwgZm9yIGxhbmd1YWdlICcke2xhbmd1YWdlfScsIGdldHRpbmcgZGVmYXVsdCBgICtcbiAgICAgICAgICAgICAgYHN0cmluZ3MueG1sYCk7XG4gICAgYXJncy5wb3AoKTtcbiAgICBhd2FpdCBleGVjKCdqYXZhJywgYXJncyk7XG4gIH1cblxuICB0cnkge1xuICAgIGxvZy5kZWJ1ZyhcIlJlYWRpbmcgc3RyaW5ncyBmcm9tIGNvbnZlcnRlZCBzdHJpbmdzLmpzb25cIik7XG4gICAgbG9jYWxQYXRoID0gcGF0aC5qb2luKG91dCwgc3RyaW5nc0pzb24pO1xuICAgIGZpbGVEYXRhID0gYXdhaXQgZnMucmVhZEZpbGUobG9jYWxQYXRoLCAndXRmOCcpO1xuICAgIGFwa1N0cmluZ3MgPSBKU09OLnBhcnNlKGZpbGVEYXRhKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChmaWxlRGF0YSkge1xuICAgICAgbG9nLmRlYnVnKGBDb250ZW50IHN0YXJ0ZWQgd2l0aDogJHtmaWxlRGF0YS5zbGljZSgwLCAzMDApfWApO1xuICAgIH1cbiAgICBsZXQgbXNnID0gYENvdWxkIG5vdCBwYXJzZSBzdHJpbmdzIGZyb20gc3RyaW5ncy5qc29uLiBPcmlnaW5hbCBgICtcbiAgICAgICAgICAgICAgYGVycm9yOiAke2UubWVzc2FnZX1gO1xuICAgIGxvZy5lcnJvckFuZFRocm93KG1zZyk7XG4gIH1cbiAgcmV0dXJuIHthcGtTdHJpbmdzLCBsb2NhbFBhdGh9O1xufTtcblxuYXBrVXRpbHNNZXRob2RzLmdldERldmljZUxhbmd1YWdlID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsZXQgbGFuZ3VhZ2U7XG4gIGlmIChhd2FpdCB0aGlzLmdldEFwaUxldmVsKCkgPCAyMykge1xuICAgIGxhbmd1YWdlID0gYXdhaXQgdGhpcy5nZXREZXZpY2VTeXNMYW5ndWFnZSgpO1xuICAgIGlmICghbGFuZ3VhZ2UpIHtcbiAgICAgIGxhbmd1YWdlID0gYXdhaXQgdGhpcy5nZXREZXZpY2VQcm9kdWN0TGFuZ3VhZ2UoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGFuZ3VhZ2UgPSAoYXdhaXQgdGhpcy5nZXREZXZpY2VMb2NhbGUoKSkuc3BsaXQoXCItXCIpWzBdO1xuICB9XG4gIHJldHVybiBsYW5ndWFnZTtcbn07XG5cbmFwa1V0aWxzTWV0aG9kcy5zZXREZXZpY2VMYW5ndWFnZSA9IGFzeW5jIGZ1bmN0aW9uIChsYW5ndWFnZSkge1xuICAvLyB0aGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgaW4gQVBJIDwgMjNcbiAgYXdhaXQgdGhpcy5zZXREZXZpY2VTeXNMYW5ndWFnZShsYW5ndWFnZSk7XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuZ2V0RGV2aWNlQ291bnRyeSA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhpcyBtZXRob2QgaXMgb25seSB1c2VkIGluIEFQSSA8IDIzXG4gIGxldCBjb3VudHJ5ID0gYXdhaXQgdGhpcy5nZXREZXZpY2VTeXNDb3VudHJ5KCk7XG4gIGlmICghY291bnRyeSkge1xuICAgIGNvdW50cnkgPSBhd2FpdCB0aGlzLmdldERldmljZVByb2R1Y3RDb3VudHJ5KCk7XG4gIH1cbiAgcmV0dXJuIGNvdW50cnk7XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuc2V0RGV2aWNlQ291bnRyeSA9IGFzeW5jIGZ1bmN0aW9uIChjb3VudHJ5KSB7XG4gIC8vIHRoaXMgbWV0aG9kIGlzIG9ubHkgdXNlZCBpbiBBUEkgPCAyM1xuICBhd2FpdCB0aGlzLnNldERldmljZVN5c0NvdW50cnkoY291bnRyeSk7XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuZ2V0RGV2aWNlTG9jYWxlID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAvLyB0aGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgaW4gQVBJID49IDIzXG4gIGxldCBsb2NhbGUgPSBhd2FpdCB0aGlzLmdldERldmljZVN5c0xvY2FsZSgpO1xuICBpZiAoIWxvY2FsZSkge1xuICAgIGxvY2FsZSA9IGF3YWl0IHRoaXMuZ2V0RGV2aWNlUHJvZHVjdExvY2FsZSgpO1xuICB9XG4gIHJldHVybiBsb2NhbGU7XG59O1xuXG5hcGtVdGlsc01ldGhvZHMuc2V0RGV2aWNlTG9jYWxlID0gYXN5bmMgZnVuY3Rpb24gKGxvY2FsZSkge1xuICAvLyB0aGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgaW4gQVBJID49IDIzXG4gIGF3YWl0IHRoaXMuc2V0RGV2aWNlU3lzTG9jYWxlKGxvY2FsZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhcGtVdGlsc01ldGhvZHM7XG4iXX0=