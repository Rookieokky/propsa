require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumSupport = require('appium-support');

var _libInstall = require('../lib/install');

var _libChromedriver = require('../lib/chromedriver');

var _libChromedriver2 = _interopRequireDefault(_libChromedriver);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function assertNoPreviousDirs() {
  var err;
  return _regeneratorRuntime.async(function assertNoPreviousDirs$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        err = undefined;
        context$1$0.prev = 1;
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(_libInstall.CD_BASE_DIR));

      case 4:
        context$1$0.next = 9;
        break;

      case 6:
        context$1$0.prev = 6;
        context$1$0.t0 = context$1$0['catch'](1);

        err = context$1$0.t0;

      case 9:
        should.exist(err);
        err.code.should.eql("ENOENT");

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[1, 6]]);
}

describe('install scripts', function () {
  var _this = this;

  this.timeout(20000);
  beforeEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(_libInstall.CD_BASE_DIR));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should install for this platform', function callee$1$0() {
    var cdPath, cdStat, cd;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(assertNoPreviousDirs());

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libInstall.install)());

        case 4:
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap((0, _libInstall.getChromedriverBinaryPath)());

        case 6:
          cdPath = context$2$0.sent;
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(cdPath));

        case 9:
          cdStat = context$2$0.sent;

          cdStat.size.should.be.above(5000000);
          cdPath.should.contain((0, _libInstall.getCurPlatform)());
          cd = new _libChromedriver2['default']();
          context$2$0.next = 15;
          return _regeneratorRuntime.awrap(cd.initChromedriverPath());

        case 15:
          cd.chromedriver.should.equal(cdPath);

        case 16:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should install for all platforms', function callee$1$0() {
    var plats, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, platform, arch, cdPath, cdStat;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          this.timeout(120000);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(assertNoPreviousDirs());

        case 3:
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap((0, _libInstall.installAll)());

        case 5:
          plats = [['linux', '32'], ['linux', '64'], ['win', '32'], ['mac', '32']];
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$2$0.prev = 9;
          _iterator = _getIterator(plats);

        case 11:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            context$2$0.next = 27;
            break;
          }

          _step$value = _slicedToArray(_step.value, 2);
          platform = _step$value[0];
          arch = _step$value[1];
          context$2$0.next = 17;
          return _regeneratorRuntime.awrap((0, _libInstall.getChromedriverBinaryPath)(platform, arch));

        case 17:
          cdPath = context$2$0.sent;
          context$2$0.next = 20;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(cdPath));

        case 20:
          cdStat = context$2$0.sent;

          cdStat.size.should.be.above(5000000);
          cdPath.should.contain(platform);
          if (platform === "linux") {
            cdPath.should.contain(arch);
          } else {
            cdPath.should.not.contain(arch);
          }

        case 24:
          _iteratorNormalCompletion = true;
          context$2$0.next = 11;
          break;

        case 27:
          context$2$0.next = 33;
          break;

        case 29:
          context$2$0.prev = 29;
          context$2$0.t0 = context$2$0['catch'](9);
          _didIteratorError = true;
          _iteratorError = context$2$0.t0;

        case 33:
          context$2$0.prev = 33;
          context$2$0.prev = 34;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 36:
          context$2$0.prev = 36;

          if (!_didIteratorError) {
            context$2$0.next = 39;
            break;
          }

          throw _iteratorError;

        case 39:
          return context$2$0.finish(36);

        case 40:
          return context$2$0.finish(33);

        case 41:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[9, 29, 33, 41], [34,, 36, 40]]);
  });
  it('should throw an error in chromedriver if nothing is installed', function callee$1$0() {
    var cd, err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(assertNoPreviousDirs());

        case 2:
          cd = new _libChromedriver2['default']();
          err = undefined;
          context$2$0.prev = 4;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(cd.initChromedriverPath());

        case 7:
          context$2$0.next = 12;
          break;

        case 9:
          context$2$0.prev = 9;
          context$2$0.t0 = context$2$0['catch'](4);

          err = context$2$0.t0;

        case 12:
          should.exist(err);
          err.message.should.contain("path");

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[4, 9]]);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaW5zdGFsbC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7b0JBRWlCLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7OzZCQUMxQixnQkFBZ0I7OzBCQUVKLGdCQUFnQjs7K0JBQ3RCLHFCQUFxQjs7OztBQUc5QyxJQUFJLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUMzQixrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixTQUFlLG9CQUFvQjtNQUM3QixHQUFHOzs7O0FBQUgsV0FBRzs7O3lDQUVDLGtCQUFHLElBQUkseUJBQWE7Ozs7Ozs7Ozs7QUFFMUIsV0FBRyxpQkFBSSxDQUFDOzs7QUFFVixjQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2xCLFdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7OztDQUMvQjs7QUFFRCxRQUFRLENBQUMsaUJBQWlCLEVBQUUsWUFBWTs7O0FBQ3RDLE1BQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDcEIsWUFBVSxDQUFDOzs7OzsyQ0FDSCxrQkFBRyxNQUFNLHlCQUFhOzs7Ozs7O0dBQzdCLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyxrQ0FBa0MsRUFBRTtRQUdqQyxNQUFNLEVBQ04sTUFBTSxFQUdOLEVBQUU7Ozs7OzJDQU5BLG9CQUFvQixFQUFFOzs7OzJDQUN0QiwwQkFBUzs7OzsyQ0FDSSw0Q0FBMkI7OztBQUExQyxnQkFBTTs7MkNBQ1Msa0JBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7O0FBQTlCLGdCQUFNOztBQUNWLGdCQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JDLGdCQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxpQ0FBZ0IsQ0FBQyxDQUFDO0FBQ3BDLFlBQUUsR0FBRyxrQ0FBa0I7OzJDQUNyQixFQUFFLENBQUMsb0JBQW9CLEVBQUU7OztBQUMvQixZQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7R0FDdEMsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLGtDQUFrQyxFQUFFO1FBSS9CLEtBQUssK0ZBTUQsUUFBUSxFQUFFLElBQUksRUFDbEIsTUFBTSxFQUNOLE1BQU07Ozs7O0FBWFosY0FBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs7MkNBQ2Ysb0JBQW9CLEVBQUU7Ozs7MkNBQ3RCLDZCQUFZOzs7QUFDWixlQUFLLEdBQUcsQ0FDWixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFDZixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFDZixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFDYixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FDZDs7Ozs7bUNBQzRCLEtBQUs7Ozs7Ozs7OztBQUF4QixrQkFBUTtBQUFFLGNBQUk7OzJDQUNILDJDQUEwQixRQUFRLEVBQUUsSUFBSSxDQUFDOzs7QUFBeEQsZ0JBQU07OzJDQUNTLGtCQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7OztBQUE5QixnQkFBTTs7QUFDVixnQkFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyQyxnQkFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEMsY0FBSSxRQUFRLEtBQUssT0FBTyxFQUFFO0FBQ3hCLGtCQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztXQUM3QixNQUFNO0FBQ0wsa0JBQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztXQUNqQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQUVKLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQywrREFBK0QsRUFBRTtRQUU5RCxFQUFFLEVBQ0YsR0FBRzs7Ozs7MkNBRkQsb0JBQW9CLEVBQUU7OztBQUN4QixZQUFFLEdBQUcsa0NBQWtCO0FBQ3ZCLGFBQUc7OzsyQ0FFQyxFQUFFLENBQUMsb0JBQW9CLEVBQUU7Ozs7Ozs7Ozs7QUFFL0IsYUFBRyxpQkFBSSxDQUFDOzs7QUFFVixnQkFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNsQixhQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7R0FDcEMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvaW5zdGFsbC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgQ0RfQkFTRV9ESVIsIGluc3RhbGwsIGluc3RhbGxBbGwsIGdldENocm9tZWRyaXZlckJpbmFyeVBhdGgsXG4gICAgICAgICBnZXRDdXJQbGF0Zm9ybSB9IGZyb20gJy4uL2xpYi9pbnN0YWxsJztcbmltcG9ydCBDaHJvbWVkcml2ZXIgZnJvbSAnLi4vbGliL2Nocm9tZWRyaXZlcic7XG5cblxubGV0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmFzeW5jIGZ1bmN0aW9uIGFzc2VydE5vUHJldmlvdXNEaXJzICgpIHtcbiAgbGV0IGVycjtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy5zdGF0KENEX0JBU0VfRElSKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGVyciA9IGU7XG4gIH1cbiAgc2hvdWxkLmV4aXN0KGVycik7XG4gIGVyci5jb2RlLnNob3VsZC5lcWwoXCJFTk9FTlRcIik7XG59XG5cbmRlc2NyaWJlKCdpbnN0YWxsIHNjcmlwdHMnLCBmdW5jdGlvbiAoKSB7XG4gIHRoaXMudGltZW91dCgyMDAwMCk7XG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGZzLnJpbXJhZihDRF9CQVNFX0RJUik7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGluc3RhbGwgZm9yIHRoaXMgcGxhdGZvcm0nLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgYXNzZXJ0Tm9QcmV2aW91c0RpcnMoKTtcbiAgICBhd2FpdCBpbnN0YWxsKCk7XG4gICAgbGV0IGNkUGF0aCA9IGF3YWl0IGdldENocm9tZWRyaXZlckJpbmFyeVBhdGgoKTtcbiAgICBsZXQgY2RTdGF0ID0gYXdhaXQgZnMuc3RhdChjZFBhdGgpO1xuICAgIGNkU3RhdC5zaXplLnNob3VsZC5iZS5hYm92ZSg1MDAwMDAwKTtcbiAgICBjZFBhdGguc2hvdWxkLmNvbnRhaW4oZ2V0Q3VyUGxhdGZvcm0oKSk7XG4gICAgbGV0IGNkID0gbmV3IENocm9tZWRyaXZlcigpO1xuICAgIGF3YWl0IGNkLmluaXRDaHJvbWVkcml2ZXJQYXRoKCk7XG4gICAgY2QuY2hyb21lZHJpdmVyLnNob3VsZC5lcXVhbChjZFBhdGgpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBpbnN0YWxsIGZvciBhbGwgcGxhdGZvcm1zJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudGltZW91dCgxMjAwMDApO1xuICAgIGF3YWl0IGFzc2VydE5vUHJldmlvdXNEaXJzKCk7XG4gICAgYXdhaXQgaW5zdGFsbEFsbCgpO1xuICAgIGNvbnN0IHBsYXRzID0gW1xuICAgICAgWydsaW51eCcsICczMiddLFxuICAgICAgWydsaW51eCcsICc2NCddLFxuICAgICAgWyd3aW4nLCAnMzInXSxcbiAgICAgIFsnbWFjJywgJzMyJ11cbiAgICBdO1xuICAgIGZvciAobGV0IFtwbGF0Zm9ybSwgYXJjaF0gb2YgcGxhdHMpIHtcbiAgICAgIGxldCBjZFBhdGggPSBhd2FpdCBnZXRDaHJvbWVkcml2ZXJCaW5hcnlQYXRoKHBsYXRmb3JtLCBhcmNoKTtcbiAgICAgIGxldCBjZFN0YXQgPSBhd2FpdCBmcy5zdGF0KGNkUGF0aCk7XG4gICAgICBjZFN0YXQuc2l6ZS5zaG91bGQuYmUuYWJvdmUoNTAwMDAwMCk7XG4gICAgICBjZFBhdGguc2hvdWxkLmNvbnRhaW4ocGxhdGZvcm0pO1xuICAgICAgaWYgKHBsYXRmb3JtID09PSBcImxpbnV4XCIpIHtcbiAgICAgICAgY2RQYXRoLnNob3VsZC5jb250YWluKGFyY2gpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2RQYXRoLnNob3VsZC5ub3QuY29udGFpbihhcmNoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGluIGNocm9tZWRyaXZlciBpZiBub3RoaW5nIGlzIGluc3RhbGxlZCcsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBhc3NlcnROb1ByZXZpb3VzRGlycygpO1xuICAgIGxldCBjZCA9IG5ldyBDaHJvbWVkcml2ZXIoKTtcbiAgICBsZXQgZXJyO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBjZC5pbml0Q2hyb21lZHJpdmVyUGF0aCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVyciA9IGU7XG4gICAgfVxuICAgIHNob3VsZC5leGlzdChlcnIpO1xuICAgIGVyci5tZXNzYWdlLnNob3VsZC5jb250YWluKFwicGF0aFwiKTtcbiAgfSk7XG59KTtcbiJdfQ==