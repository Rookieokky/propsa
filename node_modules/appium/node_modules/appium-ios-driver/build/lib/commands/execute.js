'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    helpers = {},
    extensions = {};

commands.execute = function callee$0$0(script, args) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 7;
          break;
        }

        args = this.convertElementsForAtoms(args);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeAtom('execute_script', [script, args]));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        if (!script.match(/^mobile\:/)) {
          context$1$0.next = 14;
          break;
        }

        script = script.replace(/^mobile\:/, '').trim();
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.executeMobile(script, _lodash2['default'].isArray(args) ? args[0] : args));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(script));

      case 16:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.executeAsync = function callee$0$0(script, args, sessionId) {
  var address, port, responseUrl, defaultHost, urlObject;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(script));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        address = this.opts.callbackAddress || this.opts.address;
        port = this.opts.callbackPort || this.opts.port;

        sessionId = sessionId || this.sessionId;
        responseUrl = 'http://' + address + ':' + port + '/wd/hub/session/' + sessionId + '/receive_async_response';

        if (this.isRealDevice()) {
          defaultHost = this.opts.address;
          urlObject = _url2['default'].parse(responseUrl);

          if (urlObject.hostname === defaultHost) {
            _logger2['default'].debug('Real device safari test and no custom callback address ' + 'set, changing callback address to local ip.');
            urlObject.hostname = _appiumSupport.util.localIp();
            urlObject.host = null; // set to null, otherwise hostname is ignored
            responseUrl = _url2['default'].format(urlObject);
          } else {
            _logger2['default'].debug('Custom callback address set, leaving as is.');
          }
        }

        _logger2['default'].debug('Response url for executeAsync: ' + responseUrl);
        args = this.convertElementsForAtoms(args);
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.executeAtomAsync('execute_async_script', [script, args, this.asyncWaitMs], responseUrl));

      case 13:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.receiveAsyncResponse = function callee$0$0(status, value) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Received async response: ' + JSON.stringify(value));
        if (!_lodash2['default'].isNull(this.asyncPromise) && !_lodash2['default'].isUndefined(this.asyncPromise)) {
          if (status !== 0) {
            this.asyncPromise.reject((0, _mobileJsonWireProtocol.errorFromCode)(status, value.message));
          } else {
            this.asyncPromise.resolve(value);
          }
        } else {
          _logger2['default'].warn('Received async response when we were not expecting one! ' + ('Response was: ' + JSON.stringify(value)));
        }

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.executeMobile = function callee$0$0(mobileCommand) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(mobileCommand === 'scroll')) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.mobileScroll(opts));

      case 3:
        context$1$0.next = 6;
        break;

      case 5:
        throw new _mobileJsonWireProtocol.errors.UnknownCommandError('Unknown command, all the mobile commands except scroll have been removed.');

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// we only support mobile: scroll
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQ0FBc0MsMkJBQTJCOztzQkFDbkQsUUFBUTs7OzttQkFDTixLQUFLOzs7OzZCQUNBLGdCQUFnQjs7c0JBQ2xCLFdBQVc7Ozs7QUFHOUIsSUFBSSxRQUFRLEdBQUcsRUFBRTtJQUFFLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFakQsUUFBUSxDQUFDLE9BQU8sR0FBRyxvQkFBZ0IsTUFBTSxFQUFFLElBQUk7Ozs7YUFDekMsSUFBSSxDQUFDLFlBQVksRUFBRTs7Ozs7QUFDckIsWUFBSSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7eUNBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7Ozs7OzthQUUzRCxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7Ozs7QUFDM0IsY0FBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDOzt5Q0FDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsb0JBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7Ozs7Ozs7eUNBRTVELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQzs7Ozs7Ozs7OztDQUd2RCxDQUFDOztBQUVGLFFBQVEsQ0FBQyxZQUFZLEdBQUcsb0JBQWdCLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUztNQUt6RCxPQUFPLEVBQ1AsSUFBSSxFQUVKLFdBQVcsRUFHVCxXQUFXLEVBQ1gsU0FBUzs7OztZQVhWLElBQUksQ0FBQyxZQUFZLEVBQUU7Ozs7Ozt5Q0FDVCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7Ozs7OztBQUdoRCxlQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPO0FBQ3hELFlBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7O0FBQ25ELGlCQUFTLEdBQUcsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUM7QUFDcEMsbUJBQVcsZUFBYSxPQUFPLFNBQUksSUFBSSx3QkFBbUIsU0FBUzs7QUFFdkUsWUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUU7QUFDbkIscUJBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU87QUFDL0IsbUJBQVMsR0FBRyxpQkFBSSxLQUFLLENBQUMsV0FBVyxDQUFDOztBQUN0QyxjQUFJLFNBQVMsQ0FBQyxRQUFRLEtBQUssV0FBVyxFQUFFO0FBQ3RDLGdDQUFPLEtBQUssQ0FBQyx5REFBeUQsR0FDekQsNkNBQTZDLENBQUMsQ0FBQztBQUM1RCxxQkFBUyxDQUFDLFFBQVEsR0FBRyxvQkFBSyxPQUFPLEVBQUUsQ0FBQztBQUNwQyxxQkFBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDdEIsdUJBQVcsR0FBRyxpQkFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7V0FDckMsTUFBTTtBQUNMLGdDQUFPLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1dBQzdEO1NBQ0Y7O0FBRUQsNEJBQU8sS0FBSyxxQ0FBbUMsV0FBVyxDQUFHLENBQUM7QUFDOUQsWUFBSSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7eUNBQzdCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLFdBQVcsQ0FBQzs7Ozs7Ozs7OztDQUMxRyxDQUFDOztBQUVGLFFBQVEsQ0FBQyxvQkFBb0IsR0FBRyxvQkFBZ0IsTUFBTSxFQUFFLEtBQUs7Ozs7QUFDM0QsNEJBQU8sS0FBSywrQkFBNkIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBRyxDQUFDO0FBQ2xFLFlBQUksQ0FBQyxvQkFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsb0JBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRTtBQUNyRSxjQUFJLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDaEIsZ0JBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLDJDQUFjLE1BQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztXQUNoRSxNQUFNO0FBQ0wsZ0JBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1dBQ2xDO1NBQ0YsTUFBTTtBQUNMLDhCQUFPLElBQUksQ0FBQyxpRkFDaUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBRSxDQUFDLENBQUM7U0FDdkQ7Ozs7Ozs7Q0FDRixDQUFDOztBQUVGLFFBQVEsQ0FBQyxhQUFhLEdBQUcsb0JBQWdCLGFBQWE7TUFBRSxJQUFJLHlEQUFDLEVBQUU7Ozs7Y0FFekQsYUFBYSxLQUFLLFFBQVEsQ0FBQTs7Ozs7O3lDQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQzs7Ozs7OztjQUV2QixJQUFJLCtCQUFPLG1CQUFtQixDQUFDLDJFQUEyRSxDQUFDOzs7Ozs7O0NBRXBILENBQUM7O0FBRUYsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87cUJBQ1gsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvZXhlY3V0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVycm9ycywgZXJyb3JGcm9tQ29kZSB9IGZyb20gJ21vYmlsZS1qc29uLXdpcmUtcHJvdG9jb2wnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB1cmwgZnJvbSAndXJsJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy5leGVjdXRlID0gYXN5bmMgZnVuY3Rpb24gKHNjcmlwdCwgYXJncykge1xuICBpZiAodGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIGFyZ3MgPSB0aGlzLmNvbnZlcnRFbGVtZW50c0ZvckF0b21zKGFyZ3MpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tKCdleGVjdXRlX3NjcmlwdCcsIFtzY3JpcHQsIGFyZ3NdKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoc2NyaXB0Lm1hdGNoKC9ebW9iaWxlXFw6LykpIHtcbiAgICAgIHNjcmlwdCA9IHNjcmlwdC5yZXBsYWNlKC9ebW9iaWxlXFw6LywgJycpLnRyaW0oKTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVNb2JpbGUoc2NyaXB0LCBfLmlzQXJyYXkoYXJncykgPyBhcmdzWzBdIDogYXJncyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChzY3JpcHQpO1xuICAgIH1cbiAgfVxufTtcblxuY29tbWFuZHMuZXhlY3V0ZUFzeW5jID0gYXN5bmMgZnVuY3Rpb24gKHNjcmlwdCwgYXJncywgc2Vzc2lvbklkKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnVpQXV0b0NsaWVudC5zZW5kQ29tbWFuZChzY3JpcHQpO1xuICB9XG5cbiAgbGV0IGFkZHJlc3MgPSB0aGlzLm9wdHMuY2FsbGJhY2tBZGRyZXNzIHx8IHRoaXMub3B0cy5hZGRyZXNzO1xuICBsZXQgcG9ydCA9IHRoaXMub3B0cy5jYWxsYmFja1BvcnQgfHwgdGhpcy5vcHRzLnBvcnQ7XG4gIHNlc3Npb25JZCA9IHNlc3Npb25JZCB8fCB0aGlzLnNlc3Npb25JZDtcbiAgbGV0IHJlc3BvbnNlVXJsID0gYGh0dHA6Ly8ke2FkZHJlc3N9OiR7cG9ydH0vd2QvaHViL3Nlc3Npb24vJHtzZXNzaW9uSWR9L3JlY2VpdmVfYXN5bmNfcmVzcG9uc2VgO1xuXG4gIGlmICh0aGlzLmlzUmVhbERldmljZSgpKSB7XG4gICAgbGV0IGRlZmF1bHRIb3N0ID0gdGhpcy5vcHRzLmFkZHJlc3M7XG4gICAgbGV0IHVybE9iamVjdCA9IHVybC5wYXJzZShyZXNwb25zZVVybCk7XG4gICAgaWYgKHVybE9iamVjdC5ob3N0bmFtZSA9PT0gZGVmYXVsdEhvc3QpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnUmVhbCBkZXZpY2Ugc2FmYXJpIHRlc3QgYW5kIG5vIGN1c3RvbSBjYWxsYmFjayBhZGRyZXNzICcgK1xuICAgICAgICAgICAgICAgICAgICdzZXQsIGNoYW5naW5nIGNhbGxiYWNrIGFkZHJlc3MgdG8gbG9jYWwgaXAuJyk7XG4gICAgICB1cmxPYmplY3QuaG9zdG5hbWUgPSB1dGlsLmxvY2FsSXAoKTtcbiAgICAgIHVybE9iamVjdC5ob3N0ID0gbnVsbDsgLy8gc2V0IHRvIG51bGwsIG90aGVyd2lzZSBob3N0bmFtZSBpcyBpZ25vcmVkXG4gICAgICByZXNwb25zZVVybCA9IHVybC5mb3JtYXQodXJsT2JqZWN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nZ2VyLmRlYnVnKCdDdXN0b20gY2FsbGJhY2sgYWRkcmVzcyBzZXQsIGxlYXZpbmcgYXMgaXMuJyk7XG4gICAgfVxuICB9XG5cbiAgbG9nZ2VyLmRlYnVnKGBSZXNwb25zZSB1cmwgZm9yIGV4ZWN1dGVBc3luYzogJHtyZXNwb25zZVVybH1gKTtcbiAgYXJncyA9IHRoaXMuY29udmVydEVsZW1lbnRzRm9yQXRvbXMoYXJncyk7XG4gIHJldHVybiBhd2FpdCB0aGlzLmV4ZWN1dGVBdG9tQXN5bmMoJ2V4ZWN1dGVfYXN5bmNfc2NyaXB0JywgW3NjcmlwdCwgYXJncywgdGhpcy5hc3luY1dhaXRNc10sIHJlc3BvbnNlVXJsKTtcbn07XG5cbmNvbW1hbmRzLnJlY2VpdmVBc3luY1Jlc3BvbnNlID0gYXN5bmMgZnVuY3Rpb24gKHN0YXR1cywgdmFsdWUpIHtcbiAgbG9nZ2VyLmRlYnVnKGBSZWNlaXZlZCBhc3luYyByZXNwb25zZTogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gIGlmICghXy5pc051bGwodGhpcy5hc3luY1Byb21pc2UpICYmICFfLmlzVW5kZWZpbmVkKHRoaXMuYXN5bmNQcm9taXNlKSkge1xuICAgIGlmIChzdGF0dXMgIT09IDApIHtcbiAgICAgIHRoaXMuYXN5bmNQcm9taXNlLnJlamVjdChlcnJvckZyb21Db2RlKHN0YXR1cywgdmFsdWUubWVzc2FnZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzeW5jUHJvbWlzZS5yZXNvbHZlKHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbG9nZ2VyLndhcm4oYFJlY2VpdmVkIGFzeW5jIHJlc3BvbnNlIHdoZW4gd2Ugd2VyZSBub3QgZXhwZWN0aW5nIG9uZSEgYCArXG4gICAgICAgICAgICAgICAgYFJlc3BvbnNlIHdhczogJHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmV4ZWN1dGVNb2JpbGUgPSBhc3luYyBmdW5jdGlvbiAobW9iaWxlQ29tbWFuZCwgb3B0cz17fSkge1xuICAvLyB3ZSBvbmx5IHN1cHBvcnQgbW9iaWxlOiBzY3JvbGxcbiAgaWYgKG1vYmlsZUNvbW1hbmQgPT09ICdzY3JvbGwnKSB7XG4gICAgYXdhaXQgdGhpcy5tb2JpbGVTY3JvbGwob3B0cyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duQ29tbWFuZEVycm9yKCdVbmtub3duIGNvbW1hbmQsIGFsbCB0aGUgbW9iaWxlIGNvbW1hbmRzIGV4Y2VwdCBzY3JvbGwgaGF2ZSBiZWVuIHJlbW92ZWQuJyk7XG4gIH1cbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnMgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXX0=