'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var commands = {},
    helpers = {},
    extensions = {};

commands.timeouts = function callee$0$0(type, duration) {
  var ms;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        ms = parseInt(duration, 10);
        context$1$0.t0 = type;
        context$1$0.next = context$1$0.t0 === 'command' ? 4 : context$1$0.t0 === 'implicit' ? 6 : 9;
        break;

      case 4:
        this.newCommandTimeout(ms);
        return context$1$0.abrupt('break', 10);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.implicitWait(ms));

      case 8:
        return context$1$0.abrupt('break', 10);

      case 9:
        throw new Error('Invalid timeout \'' + type + '\'');

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.implicitWait = function (ms) {
  this.implicitWaitMs = parseInt(ms, 10);
  _logger2['default'].debug('Set implicit wait to ' + ms + 'ms');
};

helpers.newCommandTimeout = function (ms) {
  this.newCommandTimeoutMs = ms;
  _logger2['default'].debug('Set new command timeout to ' + ms + 'ms');
};

helpers.clearNewCommandTimeout = function () {
  if (this.noCommandTimer) {
    this.noCommandTimer.cancel();
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function () {
  var _this = this;

  // make sure there are no rogue timeouts
  this.clearNewCommandTimeout();

  // if command timeout is 0, it is disabled
  if (!this.newCommandTimeoutMs) return;

  this.noCommandTimer = _appiumSupport.util.cancellableDelay(this.newCommandTimeoutMs);
  this.noCommandTimer.then(function callee$1$0() {
    var errorMessage;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _logger2['default'].warn('Shutting down because we waited ' + (this.newCommandTimeoutMs / 1000 + ' seconds for a command'));
          errorMessage = 'New Command Timeout of ' + (this.newCommandTimeoutMs / 1000 + ' seconds ') + 'expired. Try customizing the timeout using the ' + '\'newCommandTimeout\' desired capability';
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(new Error(errorMessage)));

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  })['catch'](_bluebird2['default'].CancellationError, function () /*err*/{
    // ignore
  });
};

helpers.implicitWaitForCondition = function callee$0$0(condFn) {
  var wrappedCondFn;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Waiting up to ' + this.implicitWaitMs + ' ms for condition');

        wrappedCondFn = (function callee$1$0() {
          var args$2$0 = arguments;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                // reset command timeout
                this.clearNewCommandTimeout();

                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(condFn.apply(undefined, args$2$0));

              case 3:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        }).bind(this);

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(wrappedCondFn, {
          waitMs: this.implicitWaitMs, intervalMs: 500, logger: _logger2['default']
        }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
// TODO: fix jshint and use an arrow function
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90aW1lb3V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBZ0IsV0FBVzs7Ozt3QkFDTSxVQUFVOzt3QkFDN0IsVUFBVTs7Ozs2QkFDSCxnQkFBZ0I7O0FBR3JDLElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELFFBQVEsQ0FBQyxRQUFRLEdBQUcsb0JBQWdCLElBQUksRUFBRSxRQUFRO01BQzVDLEVBQUU7Ozs7QUFBRixVQUFFLEdBQUcsUUFBUSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUM7eUJBQ3hCLElBQUk7OENBQ0osU0FBUywwQkFHVCxVQUFVOzs7O0FBRmIsWUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDOzs7Ozt5Q0FHckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUM7Ozs7OztjQUdyQixJQUFJLEtBQUssd0JBQXFCLElBQUksUUFBSTs7Ozs7OztDQUVqRCxDQUFDOztBQUVGLFFBQVEsQ0FBQyxZQUFZLEdBQUcsVUFBVSxFQUFFLEVBQUU7QUFDcEMsTUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZDLHNCQUFJLEtBQUssMkJBQXlCLEVBQUUsUUFBSyxDQUFDO0NBQzNDLENBQUM7O0FBRUYsT0FBTyxDQUFDLGlCQUFpQixHQUFHLFVBQVUsRUFBRSxFQUFFO0FBQ3hDLE1BQUksQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLENBQUM7QUFDOUIsc0JBQUksS0FBSyxpQ0FBK0IsRUFBRSxRQUFLLENBQUM7Q0FDakQsQ0FBQzs7QUFFRixPQUFPLENBQUMsc0JBQXNCLEdBQUcsWUFBWTtBQUMzQyxNQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7QUFDdkIsUUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUM3QixRQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztHQUM1QjtDQUNGLENBQUM7O0FBRUYsT0FBTyxDQUFDLHNCQUFzQixHQUFHLFlBQVk7Ozs7QUFFM0MsTUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7OztBQUc5QixNQUFHLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLE9BQU87O0FBRXJDLE1BQUksQ0FBQyxjQUFjLEdBQUcsb0JBQUssZ0JBQWdCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFDdEUsTUFBSSxDQUFDLGNBQWMsQ0FDaEIsSUFBSSxDQUFDO1FBR0EsWUFBWTs7OztBQUZoQiw4QkFBSSxJQUFJLENBQUMsc0NBQ0csSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksNEJBQXdCLENBQUMsQ0FBQztBQUNqRSxzQkFBWSxHQUFHLDZCQUNQLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLGVBQVcsb0RBQ0ksNkNBQ1Q7OzJDQUMzQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Ozs7Ozs7R0FDNUQsQ0FBQyxTQUNJLENBQUMsc0JBQUUsaUJBQWlCLEVBQUUsbUJBQWE7O0dBRXhDLENBQUMsQ0FBQztDQUNOLENBQUM7O0FBRUYsT0FBTyxDQUFDLHdCQUF3QixHQUFHLG9CQUFnQixNQUFNO01BRW5ELGFBQWE7Ozs7QUFEakIsNEJBQUksS0FBSyxvQkFBa0IsSUFBSSxDQUFDLGNBQWMsdUJBQW9CLENBQUM7O0FBQy9ELHFCQUFhLEdBQUcsQ0FBQTs7Ozs7O0FBRWxCLG9CQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQzs7O2lEQUVqQixNQUFNLDJCQUFTOzs7Ozs7Ozs7O1VBQzdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7O3lDQUNDLGdDQUFpQixhQUFhLEVBQUU7QUFDM0MsZ0JBQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxxQkFBSztTQUMxRCxDQUFDOzs7Ozs7Ozs7O0NBQ0gsQ0FBQzs7QUFFRixlQUFjLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEMsUUFBUSxHQUFSLFFBQVE7UUFBRSxPQUFPLEdBQVAsT0FBTztxQkFDWCxVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy90aW1lb3V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb21tYW5kcy50aW1lb3V0cyA9IGFzeW5jIGZ1bmN0aW9uICh0eXBlLCBkdXJhdGlvbikge1xuICBsZXQgbXMgPSBwYXJzZUludChkdXJhdGlvbiwgMTApO1xuICBzd2l0Y2godHlwZSkge1xuICAgIGNhc2UgJ2NvbW1hbmQnOlxuICAgICAgdGhpcy5uZXdDb21tYW5kVGltZW91dChtcyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdpbXBsaWNpdCc6XG4gICAgICBhd2FpdCB0aGlzLmltcGxpY2l0V2FpdChtcyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHRpbWVvdXQgJyR7dHlwZX0nYCk7XG4gIH1cbn07XG5cbmNvbW1hbmRzLmltcGxpY2l0V2FpdCA9IGZ1bmN0aW9uIChtcykge1xuICB0aGlzLmltcGxpY2l0V2FpdE1zID0gcGFyc2VJbnQobXMsIDEwKTtcbiAgbG9nLmRlYnVnKGBTZXQgaW1wbGljaXQgd2FpdCB0byAke21zfW1zYCk7XG59O1xuXG5oZWxwZXJzLm5ld0NvbW1hbmRUaW1lb3V0ID0gZnVuY3Rpb24gKG1zKSB7XG4gIHRoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyA9IG1zO1xuICBsb2cuZGVidWcoYFNldCBuZXcgY29tbWFuZCB0aW1lb3V0IHRvICR7bXN9bXNgKTtcbn07XG5cbmhlbHBlcnMuY2xlYXJOZXdDb21tYW5kVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMubm9Db21tYW5kVGltZXIpIHtcbiAgICB0aGlzLm5vQ29tbWFuZFRpbWVyLmNhbmNlbCgpO1xuICAgIHRoaXMubm9Db21tYW5kVGltZXIgPSBudWxsO1xuICB9XG59O1xuXG5oZWxwZXJzLnN0YXJ0TmV3Q29tbWFuZFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIG1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gcm9ndWUgdGltZW91dHNcbiAgdGhpcy5jbGVhck5ld0NvbW1hbmRUaW1lb3V0KCk7XG5cbiAgLy8gaWYgY29tbWFuZCB0aW1lb3V0IGlzIDAsIGl0IGlzIGRpc2FibGVkXG4gIGlmKCF0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMpIHJldHVybjtcblxuICB0aGlzLm5vQ29tbWFuZFRpbWVyID0gdXRpbC5jYW5jZWxsYWJsZURlbGF5KHRoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyk7XG4gIHRoaXMubm9Db21tYW5kVGltZXJcbiAgICAudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICBsb2cud2FybihgU2h1dHRpbmcgZG93biBiZWNhdXNlIHdlIHdhaXRlZCBgICtcbiAgICAgICAgICAgICAgIGAke3RoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyAvIDEwMDB9IHNlY29uZHMgZm9yIGEgY29tbWFuZGApO1xuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBOZXcgQ29tbWFuZCBUaW1lb3V0IG9mIGAgK1xuICAgICAgICAgICAgICAgYCR7dGhpcy5uZXdDb21tYW5kVGltZW91dE1zIC8gMTAwMH0gc2Vjb25kcyBgICtcbiAgICAgICAgICAgICAgIGBleHBpcmVkLiBUcnkgY3VzdG9taXppbmcgdGhlIHRpbWVvdXQgdXNpbmcgdGhlIGAgK1xuICAgICAgICAgICAgICAgYCduZXdDb21tYW5kVGltZW91dCcgZGVzaXJlZCBjYXBhYmlsaXR5YDtcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnRVbmV4cGVjdGVkU2h1dGRvd24obmV3IEVycm9yKGVycm9yTWVzc2FnZSkpO1xuICAgIH0pXG4gICAgLmNhdGNoKEIuQ2FuY2VsbGF0aW9uRXJyb3IsICgvKmVyciovKSA9PiB7XG4gICAgICAvLyBpZ25vcmVcbiAgICB9KTtcbn07XG5cbmhlbHBlcnMuaW1wbGljaXRXYWl0Rm9yQ29uZGl0aW9uID0gYXN5bmMgZnVuY3Rpb24gKGNvbmRGbikge1xuICBsb2cuZGVidWcoYFdhaXRpbmcgdXAgdG8gJHt0aGlzLmltcGxpY2l0V2FpdE1zfSBtcyBmb3IgY29uZGl0aW9uYCk7XG4gIGxldCB3cmFwcGVkQ29uZEZuID0gYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAvLyByZXNldCBjb21tYW5kIHRpbWVvdXRcbiAgICB0aGlzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQoKTtcblxuICAgIHJldHVybiBhd2FpdCBjb25kRm4oLi4uYXJncyk7XG4gIH0uYmluZCh0aGlzKTsgLy8gVE9ETzogZml4IGpzaGludCBhbmQgdXNlIGFuIGFycm93IGZ1bmN0aW9uXG4gIHJldHVybiBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKHdyYXBwZWRDb25kRm4sIHtcbiAgICB3YWl0TXM6IHRoaXMuaW1wbGljaXRXYWl0TXMsIGludGVydmFsTXM6IDUwMCwgbG9nZ2VyOiBsb2dcbiAgfSk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl19