'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _uuidJs = require('uuid-js');

var _uuidJs2 = _interopRequireDefault(_uuidJs);

var commands = {};

commands.createSession = function callee$0$0(caps) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(this.sessionId !== null)) {
          context$1$0.next = 2;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.SessionNotCreatedError('Cannot create a new session ' + 'while one is in progress');

      case 2:
        caps = fixCaps(caps, this.desiredCapConstraints);
        this.validateDesiredCaps(caps);
        this.sessionId = _uuidJs2['default'].create().hex;
        this.caps = caps;
        this.opts = _lodash2['default'].cloneDeep(this.initialOpts);

        // merge caps onto opts so we don't need to worry about what's where
        _Object$assign(this.opts, this.caps);

        // deal with reset
        if (this.opts.noReset === true) this.opts.fullReset = false;
        if (this.opts.fullReset === true) this.opts.noReset = false;
        this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;
        this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;

        // Prevents empty string caps so we don't need to test it everywhere
        if (typeof this.opts.app === 'string' && this.opts.app.trim() === '') {
          this.opts.app = null;
        }

        if (!_lodash2['default'].isUndefined(this.caps.newCommandTimeout)) {
          this.newCommandTimeoutMs = this.caps.newCommandTimeout * 1000;
        }

        // We need to ininitialize one onUnexpectedShutdow promise per session
        // to avoid the promise fulfilment being propagated between sessions.
        this.resetOnUnexpectedShutdown();

        _logger2['default'].info('Session created with session id: ' + this.sessionId);

        return context$1$0.abrupt('return', [this.sessionId, caps]);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSessions = function callee$0$0() {
  var ret;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        ret = [];

        if (this.sessionId) {
          ret.push({
            id: this.sessionId,
            capabilities: this.caps
          });
        }

        return context$1$0.abrupt('return', ret);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSession = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', this.caps);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.deleteSession = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.clearNewCommandTimeout();
        this.sessionId = null;

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function fixCaps(originalCaps) {
  var desiredCapConstraints = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var caps = _lodash2['default'].clone(originalCaps);

  // boolean capabilities can be passed in as strings 'false' and 'true'
  // which we want to translate into boolean values
  var booleanCaps = _lodash2['default'].keys(_lodash2['default'].pickBy(desiredCapConstraints, function (k) {
    return k.isBoolean === true;
  }));
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(booleanCaps), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var cap = _step.value;

      var value = originalCaps[cap];
      if (_lodash2['default'].isString(value)) {
        value = value.toLowerCase();
        if (value === 'true' || value === 'false') {
          _logger2['default'].warn('Capability \'' + cap + '\' changed from string to boolean. This may cause unexpected behavior');
          caps[cap] = value === 'true';
        }
      }
    }

    // int capabilities are often sent in as strings by frameworks
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var intCaps = _lodash2['default'].keys(_lodash2['default'].pickBy(desiredCapConstraints, function (k) {
    return k.isNumber === true;
  }));
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = _getIterator(intCaps), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var cap = _step2.value;

      var value = originalCaps[cap];
      if (_lodash2['default'].isString(value)) {
        var newValue = parseInt(value, 10);
        if (value.indexOf('.') !== -1) {
          newValue = parseFloat(value);
        }
        _logger2['default'].warn('Capability \'' + cap + '\' changed from string (\'' + value + '\') to integer (' + newValue + '). This may cause unexpected behavior');
        caps[cap] = newValue;
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return caps;
}

exports['default'] = commands;
module.exports = exports['default'];
/* sessionId */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zZXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7c0JBQ04sV0FBVzs7OztzQ0FDSiwyQkFBMkI7O3NCQUNqQyxTQUFTOzs7O0FBRTFCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQzs7QUFFbEIsUUFBUSxDQUFDLGFBQWEsR0FBRyxvQkFBZ0IsSUFBSTs7OztjQUN2QyxJQUFJLENBQUMsU0FBUyxLQUFLLElBQUksQ0FBQTs7Ozs7Y0FDbkIsSUFBSSwrQkFBTyxzQkFBc0IsQ0FBQyw4QkFBOEIsR0FDOUIsMEJBQTBCLENBQUM7OztBQUVyRSxZQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQUNqRCxZQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDL0IsWUFBSSxDQUFDLFNBQVMsR0FBRyxvQkFBSyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUM7QUFDbkMsWUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDakIsWUFBSSxDQUFDLElBQUksR0FBRyxvQkFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDOzs7QUFHMUMsdUJBQWMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7OztBQUdwQyxZQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDNUQsWUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsS0FBSyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQzVELFlBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJ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QUksb0JBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO0FBQ3JCLFlBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDbkMsWUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQzdCLGtCQUFRLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlCO0FBQ0QsNEJBQUksSUFBSSxtQkFBZ0IsR0FBRyxrQ0FBMkIsS0FBSyx3QkFBa0IsUUFBUSwyQ0FBd0MsQ0FBQztBQUM5SCxZQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDO09BQ3RCO0tBQ0Y7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFRCxTQUFPLElBQUksQ0FBQztDQUNiOztxQkFFYyxRQUFRIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9zZXNzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ21vYmlsZS1qc29uLXdpcmUtcHJvdG9jb2wnO1xuaW1wb3J0IFVVSUQgZnJvbSAndXVpZC1qcyc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5jcmVhdGVTZXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gKGNhcHMpIHtcbiAgaWYgKHRoaXMuc2Vzc2lvbklkICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5TZXNzaW9uTm90Q3JlYXRlZEVycm9yKCdDYW5ub3QgY3JlYXRlIGEgbmV3IHNlc3Npb24gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aGlsZSBvbmUgaXMgaW4gcHJvZ3Jlc3MnKTtcbiAgfVxuICBjYXBzID0gZml4Q2FwcyhjYXBzLCB0aGlzLmRlc2lyZWRDYXBDb25zdHJhaW50cyk7XG4gIHRoaXMudmFsaWRhdGVEZXNpcmVkQ2FwcyhjYXBzKTtcbiAgdGhpcy5zZXNzaW9uSWQgPSBVVUlELmNyZWF0ZSgpLmhleDtcbiAgdGhpcy5jYXBzID0gY2FwcztcbiAgdGhpcy5vcHRzID0gXy5jbG9uZURlZXAodGhpcy5pbml0aWFsT3B0cyk7XG5cbiAgLy8gbWVyZ2UgY2FwcyBvbnRvIG9wdHMgc28gd2UgZG9uJ3QgbmVlZCB0byB3b3JyeSBhYm91dCB3aGF0J3Mgd2hlcmVcbiAgT2JqZWN0LmFzc2lnbih0aGlzLm9wdHMsIHRoaXMuY2Fwcyk7XG5cbiAgLy8gZGVhbCB3aXRoIHJlc2V0XG4gIGlmICh0aGlzLm9wdHMubm9SZXNldCA9PT0gdHJ1ZSkgdGhpcy5vcHRzLmZ1bGxSZXNldCA9IGZhbHNlO1xuICBpZiAodGhpcy5vcHRzLmZ1bGxSZXNldCA9PT0gdHJ1ZSkgdGhpcy5vcHRzLm5vUmVzZXQgPSBmYWxzZTtcbiAgdGhpcy5vcHRzLmZhc3RSZXNldCA9ICF0aGlzLm9wdHMuZnVsbFJlc2V0ICYmICF0aGlzLm9wdHMubm9SZXNldDtcbiAgdGhpcy5vcHRzLnNraXBVbmluc3RhbGwgPSB0aGlzLm9wdHMuZmFzdFJlc2V0IHx8IHRoaXMub3B0cy5ub1Jlc2V0O1xuXG4gIC8vIFByZXZlbnRzIGVtcHR5IHN0cmluZyBjYXBzIHNvIHdlIGRvbid0IG5lZWQgdG8gdGVzdCBpdCBldmVyeXdoZXJlXG4gIGlmICh0eXBlb2YgdGhpcy5vcHRzLmFwcCA9PT0gJ3N0cmluZycgJiYgdGhpcy5vcHRzLmFwcC50cmltKCkgPT09ICcnKSB7XG4gICAgdGhpcy5vcHRzLmFwcCA9IG51bGw7XG4gIH1cblxuICBpZiAoIV8uaXNVbmRlZmluZWQodGhpcy5jYXBzLm5ld0NvbW1hbmRUaW1lb3V0KSkge1xuICAgIHRoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyA9ICh0aGlzLmNhcHMubmV3Q29tbWFuZFRpbWVvdXQgKiAxMDAwKTtcbiAgfVxuXG4gIC8vIFdlIG5lZWQgdG8gaW5pbml0aWFsaXplIG9uZSBvblVuZXhwZWN0ZWRTaHV0ZG93IHByb21pc2UgcGVyIHNlc3Npb25cbiAgLy8gdG8gYXZvaWQgdGhlIHByb21pc2UgZnVsZmlsbWVudCBiZWluZyBwcm9wYWdhdGVkIGJldHdlZW4gc2Vzc2lvbnMuXG4gIHRoaXMucmVzZXRPblVuZXhwZWN0ZWRTaHV0ZG93bigpO1xuXG4gIGxvZy5pbmZvKGBTZXNzaW9uIGNyZWF0ZWQgd2l0aCBzZXNzaW9uIGlkOiAke3RoaXMuc2Vzc2lvbklkfWApO1xuXG4gIHJldHVybiBbdGhpcy5zZXNzaW9uSWQsIGNhcHNdO1xufTtcblxuY29tbWFuZHMuZ2V0U2Vzc2lvbnMgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIGxldCByZXQgPSBbXTtcblxuICBpZiAodGhpcy5zZXNzaW9uSWQpIHtcbiAgICByZXQucHVzaCh7XG4gICAgICBpZDogdGhpcy5zZXNzaW9uSWQsXG4gICAgICBjYXBhYmlsaXRpZXM6IHRoaXMuY2Fwc1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbmNvbW1hbmRzLmdldFNlc3Npb24gPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNhcHM7XG59O1xuXG5jb21tYW5kcy5kZWxldGVTZXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gKC8qIHNlc3Npb25JZCAqLykge1xuICB0aGlzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQoKTtcbiAgdGhpcy5zZXNzaW9uSWQgPSBudWxsO1xufTtcblxuZnVuY3Rpb24gZml4Q2FwcyAob3JpZ2luYWxDYXBzLCBkZXNpcmVkQ2FwQ29uc3RyYWludHMgPSB7fSkge1xuICBsZXQgY2FwcyA9IF8uY2xvbmUob3JpZ2luYWxDYXBzKTtcblxuICAvLyBib29sZWFuIGNhcGFiaWxpdGllcyBjYW4gYmUgcGFzc2VkIGluIGFzIHN0cmluZ3MgJ2ZhbHNlJyBhbmQgJ3RydWUnXG4gIC8vIHdoaWNoIHdlIHdhbnQgdG8gdHJhbnNsYXRlIGludG8gYm9vbGVhbiB2YWx1ZXNcbiAgbGV0IGJvb2xlYW5DYXBzID0gXy5rZXlzKF8ucGlja0J5KGRlc2lyZWRDYXBDb25zdHJhaW50cywgKGspID0+IGsuaXNCb29sZWFuID09PSB0cnVlKSk7XG4gIGZvciAobGV0IGNhcCBvZiBib29sZWFuQ2Fwcykge1xuICAgIGxldCB2YWx1ZSA9IG9yaWdpbmFsQ2Fwc1tjYXBdO1xuICAgIGlmIChfLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09ICdmYWxzZScpIHtcbiAgICAgICAgbG9nLndhcm4oYENhcGFiaWxpdHkgJyR7Y2FwfScgY2hhbmdlZCBmcm9tIHN0cmluZyB0byBib29sZWFuLiBUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yYCk7XG4gICAgICAgIGNhcHNbY2FwXSA9ICh2YWx1ZSA9PT0gJ3RydWUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBpbnQgY2FwYWJpbGl0aWVzIGFyZSBvZnRlbiBzZW50IGluIGFzIHN0cmluZ3MgYnkgZnJhbWV3b3Jrc1xuICBsZXQgaW50Q2FwcyA9IF8ua2V5cyhfLnBpY2tCeShkZXNpcmVkQ2FwQ29uc3RyYWludHMsIChrKSA9PiBrLmlzTnVtYmVyID09PSB0cnVlKSk7XG4gIGZvciAobGV0IGNhcCBvZiBpbnRDYXBzKSB7XG4gICAgbGV0IHZhbHVlID0gb3JpZ2luYWxDYXBzW2NhcF07XG4gICAgaWYgKF8uaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICBsZXQgbmV3VmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJy4nKSAhPT0gLTEpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGxvZy53YXJuKGBDYXBhYmlsaXR5ICcke2NhcH0nIGNoYW5nZWQgZnJvbSBzdHJpbmcgKCcke3ZhbHVlfScpIHRvIGludGVnZXIgKCR7bmV3VmFsdWV9KS4gVGhpcyBtYXkgY2F1c2UgdW5leHBlY3RlZCBiZWhhdmlvcmApO1xuICAgICAgY2Fwc1tjYXBdID0gbmV3VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhcHM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl19