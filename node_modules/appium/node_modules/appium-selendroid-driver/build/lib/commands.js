'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _utf7 = require('utf7');

var _utf72 = _interopRequireDefault(_utf7);

var _appiumAndroidDriver = require('appium-android-driver');

var imap = _utf72['default'].imap;

var extensions = {},
    commands = {},
    helpers = {};

commands.launchApp = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.startSelendroidSession());

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};
commands.reset = function callee$0$0() {
  var oldImpWait, oldCommandTimeoutMs, oldSessionId;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug("Running generic full reset");
        oldImpWait = this.implicitWaitMs;
        oldCommandTimeoutMs = this.commandTimeoutMs;
        oldSessionId = this.sessionId;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.deleteSession());

      case 6:
        _logger2['default'].debug("Restarting app");
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.startSelendroidSession());

      case 9:
        this.implicitWait(oldImpWait);
        this.timeouts('command', oldCommandTimeoutMs);
        this.sessionId = oldSessionId;

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.performMultiAction = function callee$0$0(elId, actions) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!elId) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("Selendroid actions do not support element id");

      case 2:
        return context$1$0.abrupt('return', this.selendroid.jwproxy.command('/action', 'POST', { payload: actions }));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function encodeString(value, unicode) {
  for (var i = 0; i < value.length; i++) {
    var c = value.charCodeAt(i);
    // if we're using the unicode keyboard, and this is unicode, maybe encode
    if (unicode && (c > 127 || c === 38)) {
      // this is not simple ascii, or it is an ampersand (`&`)
      if (c >= parseInt("E000", 16) && c <= parseInt("E040", 16)) {
        // Selenium uses a Unicode PUA to cover certain special characters
        // see https://code.google.com/p/selenium/source/browse/java/client/src/org/openqa/selenium/Keys.java
      } else {
          // encode the text
          value = imap.encode(value);
          break;
        }
    }
  }
  return value;
}

// Need to override this for correct unicode support
commands.setValue = function callee$0$0(value, elementId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (value instanceof Array) {
          value = value.join("");
        }
        _logger2['default'].debug('Setting text on element \'' + elementId + '\': \'' + value + '\'');
        value = encodeString(value, this.opts.unicodeKeyboard);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.selendroid.jwproxy.command('/element/' + elementId + '/value', 'POST', { value: [value] }));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// Need to override this for correct unicode support
commands.keys = function callee$0$0(value) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (value instanceof Array) {
          value = value.join("");
        }
        _logger2['default'].debug('Setting text: \'' + value + '\'');
        value = encodeString(value, this.opts.unicodeKeyboard);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.selendroid.jwproxy.command('/keys', 'POST', { value: [value] }));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// Selendroid doesn't support metastate for keyevents
commands.keyevent = function callee$0$0(keycode, metastate) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Ignoring metastate ' + metastate);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.keyevent(keycode));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// Use ADB since we don't have UiAutomator
commands.back = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.keyevent(4));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getContexts = function callee$0$0() {
  var chromiumViews, webviews, selendroidViews;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        chromiumViews = [];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumAndroidDriver.webviewHelpers.getWebviews(this.adb, this.opts.androidDeviceSocket));

      case 3:
        webviews = context$1$0.sent;

        if (_lodash2['default'].contains(webviews, _appiumAndroidDriver.CHROMIUM_WIN)) {
          chromiumViews = [_appiumAndroidDriver.CHROMIUM_WIN];
        } else {
          chromiumViews = [];
        }

        _logger2['default'].info('Getting window handles from Selendroid');
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.selendroid.jwproxy.command('/window_handles', 'GET', {}));

      case 8:
        selendroidViews = context$1$0.sent;

        this.contexts = _lodash2['default'].union(selendroidViews, chromiumViews);
        _logger2['default'].info('Available contexts: ' + JSON.stringify(this.contexts));
        return context$1$0.abrupt('return', this.contexts);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.switchContext = function callee$0$0(name) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.selendroid.jwproxy.command('/window', 'POST', { name: name }));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.isChromedriverContext = function (windowName) {
  return windowName === _appiumAndroidDriver.CHROMIUM_WIN;
};

_Object$assign(extensions, commands, helpers);

exports['default'] = extensions;
module.exports = exports['default'];

// called when setting context
//# sourceMappingURL=data:application/json;base64,