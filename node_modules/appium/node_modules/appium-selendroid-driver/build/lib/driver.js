'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumBaseDriver = require('appium-base-driver');

var _selendroid = require('./selendroid');

var _selendroid2 = _interopRequireDefault(_selendroid);

var _appiumSupport = require('appium-support');

var _appiumSelendroidInstaller = require('appium-selendroid-installer');

var _asyncbox = require('asyncbox');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _commands = require('./commands');

var _commands2 = _interopRequireDefault(_commands);

var _appiumAdb = require('appium-adb');

var _helpers = require('./helpers');

var selendroidHelpers = _interopRequireWildcard(_helpers);

var _appiumAndroidDriver = require('appium-android-driver');

var _desiredCaps = require('./desired-caps');

var _desiredCaps2 = _interopRequireDefault(_desiredCaps);

var helpers = {};
_Object$assign(helpers, selendroidHelpers, _appiumAndroidDriver.androidHelpers);

// The range of ports we can use on the system for communicating to the
// Selendroid HTTP server on the device
var SYSTEM_PORT_RANGE = [8200, 8299];

// This is the port that Selendroid listens to on the device. We will forward
// one of the ports above on the system to this port on the device.
var DEVICE_PORT = 8080;

// This is a set of methods and paths that we never want to proxy to Selendroid
var NO_PROXY = [['GET', new RegExp('^/session/[^/]+/log/types$')], ['POST', new RegExp('^/session/[^/]+/log')], ['POST', new RegExp('^/session/[^/]+/location')], ['POST', new RegExp('^/session/[^/]+/appium')], ['GET', new RegExp('^/session/[^/]+/appium')], ['POST', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/context')], ['GET', new RegExp('^/session/[^/]+/contexts')], ['POST', new RegExp('^/session/[^/]+/element/[^/]+/value')], ['GET', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/network_connection')], ['POST', new RegExp('^/session/[^/]+/ime')], ['GET', new RegExp('^/session/[^/]+/ime')], ['POST', new RegExp('^/session/[^/]+/keys')], ['POST', new RegExp('^/session/[^/]+/touch/multi/perform')]];

var APP_EXTENSION = '.apk';

var SelendroidDriver = (function (_BaseDriver) {
  _inherits(SelendroidDriver, _BaseDriver);

  function SelendroidDriver() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var shouldValidateCaps = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

    _classCallCheck(this, SelendroidDriver);

    // `shell` overwrites adb.shell, so remove
    delete opts.shell;

    _get(Object.getPrototypeOf(SelendroidDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);

    this.desiredCapConstraints = _desiredCaps2['default'];
    this.selendroid = null;
    this.jwpProxyActive = false;
    this.defaultIME = null;
    this.jwpProxyAvoid = NO_PROXY;
    this.apkStrings = {}; // map of language -> strings obj

    // handle webview mechanics from AndroidDriver
    this.chromedriver = null;
    this.sessionChromedrivers = {};

    this.opts.systemPort = opts.selendroidPort || SYSTEM_PORT_RANGE[0];
    this.opts.adbPort = opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
  }

  // first add the android-driver commands which we will fall back to

  _createClass(SelendroidDriver, [{
    key: 'createSession',
    value: function createSession(caps) {
      var sessionId, _ref, _ref2;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap((0, _appiumSelendroidInstaller.serverExists)());

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            throw new Error('Cannot start a selendroid session because the server ' + 'apk does not exist. Please run `npm run-script ' + 'selendroid` in the appium-selendroid-driver package');

          case 5:
            sessionId = undefined;
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(SelendroidDriver.prototype), 'createSession', this).call(this, caps));

          case 8:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];

            this.curContext = this.defaultContextName();
            // fail very early if the app doesn't actually exist, since selendroid
            // (unlike the android driver) can't run a pre-installed app based
            // only on package name. It has to be an actual apk
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.helpers.configureApp(this.opts.app, APP_EXTENSION));

          case 14:
            this.opts.app = context$2$0.sent;
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.checkAppPresent());

          case 17:
            this.opts.systemPort = this.opts.selendroidPort || SYSTEM_PORT_RANGE[0];
            this.opts.adbPort = this.opts.adbPort || _appiumAdb.DEFAULT_ADB_PORT;
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.startSelendroidSession());

          case 21:
            return context$2$0.abrupt('return', [sessionId, caps]);

          case 24:
            context$2$0.prev = 24;
            context$2$0.t0 = context$2$0['catch'](0);
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.deleteSession());

          case 28:
            throw context$2$0.t0;

          case 29:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 24]]);
    }
  }, {
    key: 'startSelendroidSession',
    value: function startSelendroidSession() {
      var _ref3,

      // get device udid for this session
      udid, emPort, appInfo;

      return _regeneratorRuntime.async(function startSelendroidSession$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.opts.javaVersion) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(helpers.getJavaVersion());

          case 3:
            this.opts.javaVersion = context$2$0.sent;

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(helpers.getDeviceInfoFromCaps(this.opts));

          case 6:
            _ref3 = context$2$0.sent;
            udid = _ref3.udid;
            emPort = _ref3.emPort;

            this.opts.udid = udid;
            this.opts.emPort = emPort;

            // now that we know our java version and device info, we can create our
            // ADB instance
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(_appiumAndroidDriver.androidHelpers.createADB(this.opts.javaVersion, this.opts.udid, this.opts.emPort, this.opts.adbPort));

          case 13:
            this.adb = context$2$0.sent;
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(helpers.ensureInternetPermissionForApp(this.adb, this.opts.app));

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(helpers.getLaunchInfo(this.adb, this.opts));

          case 18:
            appInfo = context$2$0.sent;

            // and get it onto our 'opts' object so we use it from now on
            _Object$assign(this.opts, appInfo);
            // set up the modified selendroid server etc
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(this.initSelendroidServer());

          case 22:
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(helpers.initDevice(this.adb, this.opts));

          case 24:
            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(this.adb.forwardPort(this.opts.systemPort, DEVICE_PORT));

          case 26:
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.initAUT());

          case 28:
            context$2$0.next = 30;
            return _regeneratorRuntime.awrap(helpers.unlock(this.adb));

          case 30:
            context$2$0.next = 32;
            return _regeneratorRuntime.awrap(this.selendroid.startSession(this.caps));

          case 32:
            context$2$0.next = 34;
            return _regeneratorRuntime.awrap(this.ensureAppStarts());

          case 34:
            if (!this.opts.autoWebview) {
              context$2$0.next = 37;
              break;
            }

            context$2$0.next = 37;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(20, this.opts.autoWebviewTimeout || 2000, function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.setContext(this.defaultWebviewName()));

                  case 2:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 37:
            // now that everything has started successfully, turn on proxying so all
            // subsequent session requests go straight to/from selendroid
            this.jwpProxyActive = true;

          case 38:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'initSelendroidServer',
    value: function initSelendroidServer() {
      return _regeneratorRuntime.async(function initSelendroidServer$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // now that we have package and activity, we can create an instance of
            // selendroid with the appropriate data
            this.selendroid = new _selendroid2['default']({
              host: this.opts.host || 'localhost',
              systemPort: this.opts.systemPort,
              devicePort: DEVICE_PORT,
              adb: this.adb,
              apk: this.opts.app,
              tmpDir: this.opts.tmpDir,
              appPackage: this.opts.appPackage,
              appActivity: this.opts.appActivity
            });
            this.proxyReqRes = this.selendroid.proxyReqRes.bind(this.selendroid);
            // let selendroid repackage itself for our AUT
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.selendroid.prepareModifiedServer());

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'initAUT',
    value: function initAUT() {
      var signed;
      return _regeneratorRuntime.async(function initAUT$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(helpers.pushStrings(this.opts.language, this.adb, this.opts));

          case 2:
            this.apkStrings[this.opts.language] = context$2$0.sent;

            if (this.opts.skipUninstall) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.opts.appPackage));

          case 6:
            if (this.opts.noSign) {
              context$2$0.next = 13;
              break;
            }

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.adb.checkApkCert(this.opts.app, this.opts.appPackage));

          case 9:
            signed = context$2$0.sent;

            if (signed) {
              context$2$0.next = 13;
              break;
            }

            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.adb.sign(this.opts.app, this.opts.appPackage));

          case 13:
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(helpers.installApkRemotely(this.adb, this.opts.app, this.opts.appPackage, this.opts.fastReset));

          case 15:
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.selendroid.installModifiedServer());

          case 17:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'ensureAppStarts',
    value: function ensureAppStarts() {
      var appWaitPackage, appWaitActivity;
      return _regeneratorRuntime.async(function ensureAppStarts$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            appWaitPackage = this.opts.appWaitPackage || this.opts.appPackage;
            appWaitActivity = this.opts.appWaitActivity || this.opts.appActivity;
            context$2$0.prev = 2;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.adb.waitForActivity(appWaitPackage, appWaitActivity, 5000));

          case 5:
            context$2$0.next = 12;
            break;

          case 7:
            context$2$0.prev = 7;
            context$2$0.t0 = context$2$0['catch'](2);

            _logger2['default'].info('Selendroid did not start the activity we were waiting for, ' + ('\'' + appWaitPackage + '/' + appWaitActivity + '\'. ') + 'Starting it ourselves');
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.adb.startApp({
              pkg: this.opts.appPackage,
              activity: this.opts.appActivity,
              action: this.opts.intentAction,
              category: this.opts.intentCategory,
              flags: this.opts.intentFlags,
              waitPkg: this.opts.appWaitPackage,
              waitActivity: this.opts.appWaitActivity,
              optionalIntentArguments: this.opts.optionalIntentArguments,
              stopApp: !this.opts.dontStopAppOnReset,
              retry: false
            }));

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[2, 7]]);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting Selendroid session');

            if (!this.selendroid) {
              context$2$0.next = 6;
              break;
            }

            if (!this.jwpProxyActive) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.selendroid.deleteSession());

          case 5:
            this.selendroid = null;

          case 6:
            this.jwpProxyActive = false;

            if (!this.adb) {
              context$2$0.next = 16;
              break;
            }

            if (!(this.opts.unicodeKeyboard && this.opts.resetKeyboard && this.defaultIME)) {
              context$2$0.next = 12;
              break;
            }

            _logger2['default'].debug('Resetting IME to \'' + this.defaultIME + '\'');
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.adb.setIME(this.defaultIME));

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.adb.forceStop(this.opts.appPackage));

          case 14:
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.adb.stopLogcat());

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(SelendroidDriver.prototype), 'deleteSession', this).call(this));

          case 18:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkAppPresent',
    value: function checkAppPresent() {
      return _regeneratorRuntime.async(function checkAppPresent$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Checking whether app is actually present');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.opts.app));

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].errorAndThrow('Could not find app apk at \'' + this.opts.app + '\'');

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'defaultWebviewName',
    value: function defaultWebviewName() {
      return _appiumAndroidDriver.WEBVIEW_BASE + '0';
    }

    // Need to override android-driver's version of this since we don't actually
    // have a bootstrap; instead we just restart adb and re-forward the Selendroid
    // port
  }, {
    key: 'wrapBootstrapDisconnect',
    value: function wrapBootstrapDisconnect(wrapped) {
      return _regeneratorRuntime.async(function wrapBootstrapDisconnect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(wrapped());

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.adb.restart());

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.forwardPort(this.opts.systemPort, DEVICE_PORT));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive(sessionId) {
      _get(Object.getPrototypeOf(SelendroidDriver.prototype), 'proxyActive', this).call(this, sessionId);

      // we always have an active proxy to the selendroid server
      return true;
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList(sessionId) {
      _get(Object.getPrototypeOf(SelendroidDriver.prototype), 'getProxyAvoidList', this).call(this, sessionId);

      return this.jwpProxyAvoid;
    }
  }, {
    key: 'canProxy',
    value: function canProxy(sessionId) {
      _get(Object.getPrototypeOf(SelendroidDriver.prototype), 'canProxy', this).call(this, sessionId);

      // we can always proxy to the selendroid server
      return true;
    }
  }, {
    key: 'driverData',
    get: function get() {
      // TODO fille out resource info here
      return {};
    }
  }]);

  return SelendroidDriver;
})(_appiumBaseDriver.BaseDriver);

var _iteratorNormalCompletion = true;
var _didIteratorError = false;
var _iteratorError = undefined;

try {
  for (var _iterator = _getIterator(_lodash2['default'].pairs(_appiumAndroidDriver.androidCommands)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
    var _step$value = _slicedToArray(_step.value, 2);

    var cmd = _step$value[0];
    var fn = _step$value[1];

    // we do some different/special things with these methods
    if (!_lodash2['default'].contains(['defaultWebviewName'], cmd)) {
      SelendroidDriver.prototype[cmd] = fn;
    }
  }

  // then overwrite with any selendroid-specific commands
} catch (err) {
  _didIteratorError = true;
  _iteratorError = err;
} finally {
  try {
    if (!_iteratorNormalCompletion && _iterator['return']) {
      _iterator['return']();
    }
  } finally {
    if (_didIteratorError) {
      throw _iteratorError;
    }
  }
}

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {
  for (var _iterator2 = _getIterator(_lodash2['default'].pairs(_commands2['default'])), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var _step2$value = _slicedToArray(_step2.value, 2);

    var cmd = _step2$value[0];
    var fn = _step2$value[1];

    SelendroidDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
      _iterator2['return']();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

exports['default'] = SelendroidDriver;
module.exports = exports['default'];

// TODO handle otherSessionData for multiple sessions

// fail very early if the user's app doesn't have the appropriate perms
// for selendroid automation

// get appPackage et al from manifest if necessary

// start an avd, set the language/locale, pick an emulator, etc...
// TODO with multiple devices we'll need to parameterize this

// Further prepare the device by forwarding the Selendroid port

// prepare our actual AUT, get it on the device, etc...

// unlock the device to prepare it for testing

// launch selendroid and wait till its online and we have a session

// rescue selendroid if it fails to start our AUT

// if we want to immediately get into a webview, set our context
// appropriately

// set the localized strings for the current language from the apk
// TODO: incorporate changes from appium#5308 which fix a race cond-
// ition bug in old appium and need to be replicated here

// get Selendroid on the device too

// make sure we have an activity and package to wait for

// wait for up to 5s for selendroid to have started the app after it is
// online
//# sourceMappingURL=data:application/json;base64,